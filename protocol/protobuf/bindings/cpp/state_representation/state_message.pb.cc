// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/state_message.proto

#include "state_representation/state_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace state_representation {
namespace proto {
constexpr StateMessage::StateMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StateMessageDefaultTypeInternal {
  constexpr StateMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StateMessageDefaultTypeInternal() {}
  union {
    StateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StateMessageDefaultTypeInternal _StateMessage_default_instance_;
}  // namespace proto
}  // namespace state_representation
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_state_5frepresentation_2fstate_5fmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_state_5frepresentation_2fstate_5fmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_state_5frepresentation_2fstate_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_state_5frepresentation_2fstate_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::StateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::StateMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::StateMessage, message_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::state_representation::proto::StateMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_StateMessage_default_instance_),
};

const char descriptor_table_protodef_state_5frepresentation_2fstate_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(state_representation/state_message.pro"
  "to\022\032state_representation.proto\032 state_re"
  "presentation/state.proto\032.state_represen"
  "tation/space/spatial_state.proto\032:state_"
  "representation/space/cartesian/cartesian"
  "_state.proto\032/state_representation/space"
  "/joint/jacobian.proto\0322state_representat"
  "ion/space/joint/joint_state.proto\032)state"
  "_representation/geometry/shape.proto\032-st"
  "ate_representation/geometry/ellipsoid.pr"
  "oto\"\355\006\n\014StateMessage\0222\n\005state\030\001 \001(\0132!.st"
  "ate_representation.proto.StateH\000\022A\n\rspat"
  "ial_state\030\002 \001(\0132(.state_representation.p"
  "roto.SpatialStateH\000\022E\n\017cartesian_state\030\003"
  " \001(\0132*.state_representation.proto.Cartes"
  "ianStateH\000\022C\n\016cartesian_pose\030\004 \001(\0132).sta"
  "te_representation.proto.CartesianPoseH\000\022"
  "E\n\017cartesian_twist\030\005 \001(\0132*.state_represe"
  "ntation.proto.CartesianTwistH\000\022G\n\020cartes"
  "ian_wrench\030\006 \001(\0132+.state_representation."
  "proto.CartesianWrenchH\000\0228\n\010jacobian\030\007 \001("
  "\0132$.state_representation.proto.JacobianH"
  "\000\022=\n\013joint_state\030\010 \001(\0132&.state_represent"
  "ation.proto.JointStateH\000\022E\n\017joint_positi"
  "ons\030\t \001(\0132*.state_representation.proto.J"
  "ointPositionsH\000\022G\n\020joint_velocities\030\n \001("
  "\0132+.state_representation.proto.JointVelo"
  "citiesH\000\022A\n\rjoint_torques\030\013 \001(\0132(.state_"
  "representation.proto.JointTorquesH\000\0222\n\005s"
  "hape\030\014 \001(\0132!.state_representation.proto."
  "ShapeH\000\022:\n\tellipsoid\030\r \001(\0132%.state_repre"
  "sentation.proto.EllipsoidH\000B\016\n\014message_t"
  "ypeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_deps[7] = {
  &::descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto,
  &::descriptor_table_state_5frepresentation_2fgeometry_2fshape_2eproto,
  &::descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto,
  &::descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto,
  &::descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto,
  &::descriptor_table_state_5frepresentation_2fspace_2fspatial_5fstate_2eproto,
  &::descriptor_table_state_5frepresentation_2fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto = {
  false, false, 1291, descriptor_table_protodef_state_5frepresentation_2fstate_5fmessage_2eproto, "state_representation/state_message.proto", 
  &descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_once, descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_state_5frepresentation_2fstate_5fmessage_2eproto::offsets,
  file_level_metadata_state_5frepresentation_2fstate_5fmessage_2eproto, file_level_enum_descriptors_state_5frepresentation_2fstate_5fmessage_2eproto, file_level_service_descriptors_state_5frepresentation_2fstate_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_getter() {
  return &descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_state_5frepresentation_2fstate_5fmessage_2eproto(&descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto);
namespace state_representation {
namespace proto {

// ===================================================================

class StateMessage::_Internal {
 public:
  static const ::state_representation::proto::State& state(const StateMessage* msg);
  static const ::state_representation::proto::SpatialState& spatial_state(const StateMessage* msg);
  static const ::state_representation::proto::CartesianState& cartesian_state(const StateMessage* msg);
  static const ::state_representation::proto::CartesianPose& cartesian_pose(const StateMessage* msg);
  static const ::state_representation::proto::CartesianTwist& cartesian_twist(const StateMessage* msg);
  static const ::state_representation::proto::CartesianWrench& cartesian_wrench(const StateMessage* msg);
  static const ::state_representation::proto::Jacobian& jacobian(const StateMessage* msg);
  static const ::state_representation::proto::JointState& joint_state(const StateMessage* msg);
  static const ::state_representation::proto::JointPositions& joint_positions(const StateMessage* msg);
  static const ::state_representation::proto::JointVelocities& joint_velocities(const StateMessage* msg);
  static const ::state_representation::proto::JointTorques& joint_torques(const StateMessage* msg);
  static const ::state_representation::proto::Shape& shape(const StateMessage* msg);
  static const ::state_representation::proto::Ellipsoid& ellipsoid(const StateMessage* msg);
};

const ::state_representation::proto::State&
StateMessage::_Internal::state(const StateMessage* msg) {
  return *msg->message_type_.state_;
}
const ::state_representation::proto::SpatialState&
StateMessage::_Internal::spatial_state(const StateMessage* msg) {
  return *msg->message_type_.spatial_state_;
}
const ::state_representation::proto::CartesianState&
StateMessage::_Internal::cartesian_state(const StateMessage* msg) {
  return *msg->message_type_.cartesian_state_;
}
const ::state_representation::proto::CartesianPose&
StateMessage::_Internal::cartesian_pose(const StateMessage* msg) {
  return *msg->message_type_.cartesian_pose_;
}
const ::state_representation::proto::CartesianTwist&
StateMessage::_Internal::cartesian_twist(const StateMessage* msg) {
  return *msg->message_type_.cartesian_twist_;
}
const ::state_representation::proto::CartesianWrench&
StateMessage::_Internal::cartesian_wrench(const StateMessage* msg) {
  return *msg->message_type_.cartesian_wrench_;
}
const ::state_representation::proto::Jacobian&
StateMessage::_Internal::jacobian(const StateMessage* msg) {
  return *msg->message_type_.jacobian_;
}
const ::state_representation::proto::JointState&
StateMessage::_Internal::joint_state(const StateMessage* msg) {
  return *msg->message_type_.joint_state_;
}
const ::state_representation::proto::JointPositions&
StateMessage::_Internal::joint_positions(const StateMessage* msg) {
  return *msg->message_type_.joint_positions_;
}
const ::state_representation::proto::JointVelocities&
StateMessage::_Internal::joint_velocities(const StateMessage* msg) {
  return *msg->message_type_.joint_velocities_;
}
const ::state_representation::proto::JointTorques&
StateMessage::_Internal::joint_torques(const StateMessage* msg) {
  return *msg->message_type_.joint_torques_;
}
const ::state_representation::proto::Shape&
StateMessage::_Internal::shape(const StateMessage* msg) {
  return *msg->message_type_.shape_;
}
const ::state_representation::proto::Ellipsoid&
StateMessage::_Internal::ellipsoid(const StateMessage* msg) {
  return *msg->message_type_.ellipsoid_;
}
void StateMessage::set_allocated_state(::state_representation::proto::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    set_has_state();
    message_type_.state_ = state;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.state)
}
void StateMessage::clear_state() {
  if (_internal_has_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.state_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (spatial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state));
    if (message_arena != submessage_arena) {
      spatial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_state, submessage_arena);
    }
    set_has_spatial_state();
    message_type_.spatial_state_ = spatial_state;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.spatial_state)
}
void StateMessage::clear_spatial_state() {
  if (_internal_has_spatial_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.spatial_state_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_cartesian_state(::state_representation::proto::CartesianState* cartesian_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (cartesian_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cartesian_state));
    if (message_arena != submessage_arena) {
      cartesian_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartesian_state, submessage_arena);
    }
    set_has_cartesian_state();
    message_type_.cartesian_state_ = cartesian_state;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.cartesian_state)
}
void StateMessage::clear_cartesian_state() {
  if (_internal_has_cartesian_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.cartesian_state_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_cartesian_pose(::state_representation::proto::CartesianPose* cartesian_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (cartesian_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cartesian_pose));
    if (message_arena != submessage_arena) {
      cartesian_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartesian_pose, submessage_arena);
    }
    set_has_cartesian_pose();
    message_type_.cartesian_pose_ = cartesian_pose;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.cartesian_pose)
}
void StateMessage::clear_cartesian_pose() {
  if (_internal_has_cartesian_pose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.cartesian_pose_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_cartesian_twist(::state_representation::proto::CartesianTwist* cartesian_twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (cartesian_twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cartesian_twist));
    if (message_arena != submessage_arena) {
      cartesian_twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartesian_twist, submessage_arena);
    }
    set_has_cartesian_twist();
    message_type_.cartesian_twist_ = cartesian_twist;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.cartesian_twist)
}
void StateMessage::clear_cartesian_twist() {
  if (_internal_has_cartesian_twist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.cartesian_twist_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_cartesian_wrench(::state_representation::proto::CartesianWrench* cartesian_wrench) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (cartesian_wrench) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cartesian_wrench));
    if (message_arena != submessage_arena) {
      cartesian_wrench = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartesian_wrench, submessage_arena);
    }
    set_has_cartesian_wrench();
    message_type_.cartesian_wrench_ = cartesian_wrench;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.cartesian_wrench)
}
void StateMessage::clear_cartesian_wrench() {
  if (_internal_has_cartesian_wrench()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.cartesian_wrench_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_jacobian(::state_representation::proto::Jacobian* jacobian) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (jacobian) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jacobian));
    if (message_arena != submessage_arena) {
      jacobian = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jacobian, submessage_arena);
    }
    set_has_jacobian();
    message_type_.jacobian_ = jacobian;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.jacobian)
}
void StateMessage::clear_jacobian() {
  if (_internal_has_jacobian()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.jacobian_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_joint_state(::state_representation::proto::JointState* joint_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (joint_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joint_state));
    if (message_arena != submessage_arena) {
      joint_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joint_state, submessage_arena);
    }
    set_has_joint_state();
    message_type_.joint_state_ = joint_state;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.joint_state)
}
void StateMessage::clear_joint_state() {
  if (_internal_has_joint_state()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.joint_state_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_joint_positions(::state_representation::proto::JointPositions* joint_positions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (joint_positions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joint_positions));
    if (message_arena != submessage_arena) {
      joint_positions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joint_positions, submessage_arena);
    }
    set_has_joint_positions();
    message_type_.joint_positions_ = joint_positions;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.joint_positions)
}
void StateMessage::clear_joint_positions() {
  if (_internal_has_joint_positions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.joint_positions_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_joint_velocities(::state_representation::proto::JointVelocities* joint_velocities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (joint_velocities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joint_velocities));
    if (message_arena != submessage_arena) {
      joint_velocities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joint_velocities, submessage_arena);
    }
    set_has_joint_velocities();
    message_type_.joint_velocities_ = joint_velocities;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.joint_velocities)
}
void StateMessage::clear_joint_velocities() {
  if (_internal_has_joint_velocities()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.joint_velocities_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_joint_torques(::state_representation::proto::JointTorques* joint_torques) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (joint_torques) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joint_torques));
    if (message_arena != submessage_arena) {
      joint_torques = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joint_torques, submessage_arena);
    }
    set_has_joint_torques();
    message_type_.joint_torques_ = joint_torques;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.joint_torques)
}
void StateMessage::clear_joint_torques() {
  if (_internal_has_joint_torques()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.joint_torques_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_shape(::state_representation::proto::Shape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape));
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    set_has_shape();
    message_type_.shape_ = shape;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.shape)
}
void StateMessage::clear_shape() {
  if (_internal_has_shape()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.shape_;
    }
    clear_has_message_type();
  }
}
void StateMessage::set_allocated_ellipsoid(::state_representation::proto::Ellipsoid* ellipsoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message_type();
  if (ellipsoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ellipsoid));
    if (message_arena != submessage_arena) {
      ellipsoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ellipsoid, submessage_arena);
    }
    set_has_ellipsoid();
    message_type_.ellipsoid_ = ellipsoid;
  }
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.StateMessage.ellipsoid)
}
void StateMessage::clear_ellipsoid() {
  if (_internal_has_ellipsoid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete message_type_.ellipsoid_;
    }
    clear_has_message_type();
  }
}
StateMessage::StateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.StateMessage)
}
StateMessage::StateMessage(const StateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message_type();
  switch (from.message_type_case()) {
    case kState: {
      _internal_mutable_state()->::state_representation::proto::State::MergeFrom(from._internal_state());
      break;
    }
    case kSpatialState: {
      _internal_mutable_spatial_state()->::state_representation::proto::SpatialState::MergeFrom(from._internal_spatial_state());
      break;
    }
    case kCartesianState: {
      _internal_mutable_cartesian_state()->::state_representation::proto::CartesianState::MergeFrom(from._internal_cartesian_state());
      break;
    }
    case kCartesianPose: {
      _internal_mutable_cartesian_pose()->::state_representation::proto::CartesianPose::MergeFrom(from._internal_cartesian_pose());
      break;
    }
    case kCartesianTwist: {
      _internal_mutable_cartesian_twist()->::state_representation::proto::CartesianTwist::MergeFrom(from._internal_cartesian_twist());
      break;
    }
    case kCartesianWrench: {
      _internal_mutable_cartesian_wrench()->::state_representation::proto::CartesianWrench::MergeFrom(from._internal_cartesian_wrench());
      break;
    }
    case kJacobian: {
      _internal_mutable_jacobian()->::state_representation::proto::Jacobian::MergeFrom(from._internal_jacobian());
      break;
    }
    case kJointState: {
      _internal_mutable_joint_state()->::state_representation::proto::JointState::MergeFrom(from._internal_joint_state());
      break;
    }
    case kJointPositions: {
      _internal_mutable_joint_positions()->::state_representation::proto::JointPositions::MergeFrom(from._internal_joint_positions());
      break;
    }
    case kJointVelocities: {
      _internal_mutable_joint_velocities()->::state_representation::proto::JointVelocities::MergeFrom(from._internal_joint_velocities());
      break;
    }
    case kJointTorques: {
      _internal_mutable_joint_torques()->::state_representation::proto::JointTorques::MergeFrom(from._internal_joint_torques());
      break;
    }
    case kShape: {
      _internal_mutable_shape()->::state_representation::proto::Shape::MergeFrom(from._internal_shape());
      break;
    }
    case kEllipsoid: {
      _internal_mutable_ellipsoid()->::state_representation::proto::Ellipsoid::MergeFrom(from._internal_ellipsoid());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.StateMessage)
}

void StateMessage::SharedCtor() {
clear_has_message_type();
}

StateMessage::~StateMessage() {
  // @@protoc_insertion_point(destructor:state_representation.proto.StateMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_message_type()) {
    clear_message_type();
  }
}

void StateMessage::ArenaDtor(void* object) {
  StateMessage* _this = reinterpret_cast< StateMessage* >(object);
  (void)_this;
}
void StateMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StateMessage::clear_message_type() {
// @@protoc_insertion_point(one_of_clear_start:state_representation.proto.StateMessage)
  switch (message_type_case()) {
    case kState: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.state_;
      }
      break;
    }
    case kSpatialState: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.spatial_state_;
      }
      break;
    }
    case kCartesianState: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.cartesian_state_;
      }
      break;
    }
    case kCartesianPose: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.cartesian_pose_;
      }
      break;
    }
    case kCartesianTwist: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.cartesian_twist_;
      }
      break;
    }
    case kCartesianWrench: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.cartesian_wrench_;
      }
      break;
    }
    case kJacobian: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.jacobian_;
      }
      break;
    }
    case kJointState: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.joint_state_;
      }
      break;
    }
    case kJointPositions: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.joint_positions_;
      }
      break;
    }
    case kJointVelocities: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.joint_velocities_;
      }
      break;
    }
    case kJointTorques: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.joint_torques_;
      }
      break;
    }
    case kShape: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.shape_;
      }
      break;
    }
    case kEllipsoid: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_type_.ellipsoid_;
      }
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}


void StateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.StateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.SpatialState spatial_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.CartesianState cartesian_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.CartesianPose cartesian_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.CartesianTwist cartesian_twist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.CartesianWrench cartesian_wrench = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian_wrench(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Jacobian jacobian = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_jacobian(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.JointState joint_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_joint_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.JointPositions joint_positions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_joint_positions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.JointVelocities joint_velocities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_joint_velocities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.JointTorques joint_torques = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_joint_torques(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Shape shape = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Ellipsoid ellipsoid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ellipsoid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.StateMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.State state = 1;
  if (_internal_has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // .state_representation.proto.SpatialState spatial_state = 2;
  if (_internal_has_spatial_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spatial_state(this), target, stream);
  }

  // .state_representation.proto.CartesianState cartesian_state = 3;
  if (_internal_has_cartesian_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cartesian_state(this), target, stream);
  }

  // .state_representation.proto.CartesianPose cartesian_pose = 4;
  if (_internal_has_cartesian_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cartesian_pose(this), target, stream);
  }

  // .state_representation.proto.CartesianTwist cartesian_twist = 5;
  if (_internal_has_cartesian_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cartesian_twist(this), target, stream);
  }

  // .state_representation.proto.CartesianWrench cartesian_wrench = 6;
  if (_internal_has_cartesian_wrench()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cartesian_wrench(this), target, stream);
  }

  // .state_representation.proto.Jacobian jacobian = 7;
  if (_internal_has_jacobian()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::jacobian(this), target, stream);
  }

  // .state_representation.proto.JointState joint_state = 8;
  if (_internal_has_joint_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::joint_state(this), target, stream);
  }

  // .state_representation.proto.JointPositions joint_positions = 9;
  if (_internal_has_joint_positions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::joint_positions(this), target, stream);
  }

  // .state_representation.proto.JointVelocities joint_velocities = 10;
  if (_internal_has_joint_velocities()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::joint_velocities(this), target, stream);
  }

  // .state_representation.proto.JointTorques joint_torques = 11;
  if (_internal_has_joint_torques()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::joint_torques(this), target, stream);
  }

  // .state_representation.proto.Shape shape = 12;
  if (_internal_has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::shape(this), target, stream);
  }

  // .state_representation.proto.Ellipsoid ellipsoid = 13;
  if (_internal_has_ellipsoid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ellipsoid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.StateMessage)
  return target;
}

size_t StateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.StateMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_type_case()) {
    // .state_representation.proto.State state = 1;
    case kState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.state_);
      break;
    }
    // .state_representation.proto.SpatialState spatial_state = 2;
    case kSpatialState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.spatial_state_);
      break;
    }
    // .state_representation.proto.CartesianState cartesian_state = 3;
    case kCartesianState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.cartesian_state_);
      break;
    }
    // .state_representation.proto.CartesianPose cartesian_pose = 4;
    case kCartesianPose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.cartesian_pose_);
      break;
    }
    // .state_representation.proto.CartesianTwist cartesian_twist = 5;
    case kCartesianTwist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.cartesian_twist_);
      break;
    }
    // .state_representation.proto.CartesianWrench cartesian_wrench = 6;
    case kCartesianWrench: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.cartesian_wrench_);
      break;
    }
    // .state_representation.proto.Jacobian jacobian = 7;
    case kJacobian: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.jacobian_);
      break;
    }
    // .state_representation.proto.JointState joint_state = 8;
    case kJointState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.joint_state_);
      break;
    }
    // .state_representation.proto.JointPositions joint_positions = 9;
    case kJointPositions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.joint_positions_);
      break;
    }
    // .state_representation.proto.JointVelocities joint_velocities = 10;
    case kJointVelocities: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.joint_velocities_);
      break;
    }
    // .state_representation.proto.JointTorques joint_torques = 11;
    case kJointTorques: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.joint_torques_);
      break;
    }
    // .state_representation.proto.Shape shape = 12;
    case kShape: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.shape_);
      break;
    }
    // .state_representation.proto.Ellipsoid ellipsoid = 13;
    case kEllipsoid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_type_.ellipsoid_);
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.StateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StateMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.StateMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.StateMessage)
    MergeFrom(*source);
  }
}

void StateMessage::MergeFrom(const StateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.StateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_type_case()) {
    case kState: {
      _internal_mutable_state()->::state_representation::proto::State::MergeFrom(from._internal_state());
      break;
    }
    case kSpatialState: {
      _internal_mutable_spatial_state()->::state_representation::proto::SpatialState::MergeFrom(from._internal_spatial_state());
      break;
    }
    case kCartesianState: {
      _internal_mutable_cartesian_state()->::state_representation::proto::CartesianState::MergeFrom(from._internal_cartesian_state());
      break;
    }
    case kCartesianPose: {
      _internal_mutable_cartesian_pose()->::state_representation::proto::CartesianPose::MergeFrom(from._internal_cartesian_pose());
      break;
    }
    case kCartesianTwist: {
      _internal_mutable_cartesian_twist()->::state_representation::proto::CartesianTwist::MergeFrom(from._internal_cartesian_twist());
      break;
    }
    case kCartesianWrench: {
      _internal_mutable_cartesian_wrench()->::state_representation::proto::CartesianWrench::MergeFrom(from._internal_cartesian_wrench());
      break;
    }
    case kJacobian: {
      _internal_mutable_jacobian()->::state_representation::proto::Jacobian::MergeFrom(from._internal_jacobian());
      break;
    }
    case kJointState: {
      _internal_mutable_joint_state()->::state_representation::proto::JointState::MergeFrom(from._internal_joint_state());
      break;
    }
    case kJointPositions: {
      _internal_mutable_joint_positions()->::state_representation::proto::JointPositions::MergeFrom(from._internal_joint_positions());
      break;
    }
    case kJointVelocities: {
      _internal_mutable_joint_velocities()->::state_representation::proto::JointVelocities::MergeFrom(from._internal_joint_velocities());
      break;
    }
    case kJointTorques: {
      _internal_mutable_joint_torques()->::state_representation::proto::JointTorques::MergeFrom(from._internal_joint_torques());
      break;
    }
    case kShape: {
      _internal_mutable_shape()->::state_representation::proto::Shape::MergeFrom(from._internal_shape());
      break;
    }
    case kEllipsoid: {
      _internal_mutable_ellipsoid()->::state_representation::proto::Ellipsoid::MergeFrom(from._internal_ellipsoid());
      break;
    }
    case MESSAGE_TYPE_NOT_SET: {
      break;
    }
  }
}

void StateMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.StateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMessage::CopyFrom(const StateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.StateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMessage::IsInitialized() const {
  return true;
}

void StateMessage::InternalSwap(StateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(message_type_, other->message_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_getter, &descriptor_table_state_5frepresentation_2fstate_5fmessage_2eproto_once,
      file_level_metadata_state_5frepresentation_2fstate_5fmessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::state_representation::proto::StateMessage* Arena::CreateMaybeMessage< ::state_representation::proto::StateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::StateMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
