// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/space/joint/jacobian.proto

#include "state_representation/space/joint/jacobian.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace state_representation {
namespace proto {
constexpr Jacobian::Jacobian(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joint_names_()
  , data_()
  , frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(nullptr)
  , rows_(0u)
  , cols_(0u){}
struct JacobianDefaultTypeInternal {
  constexpr JacobianDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JacobianDefaultTypeInternal() {}
  union {
    Jacobian _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JacobianDefaultTypeInternal _Jacobian_default_instance_;
}  // namespace proto
}  // namespace state_representation
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, state_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, joint_names_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, frame_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, reference_frame_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, rows_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, cols_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Jacobian, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::state_representation::proto::Jacobian)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_Jacobian_default_instance_),
};

const char descriptor_table_protodef_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/state_representation/space/joint/jacob"
  "ian.proto\022\032state_representation.proto\032 s"
  "tate_representation/state.proto\"\243\001\n\010Jaco"
  "bian\0220\n\005state\030\001 \001(\0132!.state_representati"
  "on.proto.State\022\023\n\013joint_names\030\002 \003(\t\022\r\n\005f"
  "rame\030\003 \001(\t\022\027\n\017reference_frame\030\004 \001(\t\022\014\n\004r"
  "ows\030\005 \001(\r\022\014\n\004cols\030\006 \001(\r\022\014\n\004data\030\007 \003(\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_deps[1] = {
  &::descriptor_table_state_5frepresentation_2fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto = {
  false, false, 285, descriptor_table_protodef_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto, "state_representation/space/joint/jacobian.proto", 
  &descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_once, descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto::offsets,
  file_level_metadata_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto, file_level_enum_descriptors_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto, file_level_service_descriptors_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_getter() {
  return &descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto(&descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto);
namespace state_representation {
namespace proto {

// ===================================================================

class Jacobian::_Internal {
 public:
  static const ::state_representation::proto::State& state(const Jacobian* msg);
};

const ::state_representation::proto::State&
Jacobian::_Internal::state(const Jacobian* msg) {
  return *msg->state_;
}
void Jacobian::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
Jacobian::Jacobian(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joint_names_(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.Jacobian)
}
Jacobian::Jacobian(const Jacobian& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_names_(from.joint_names_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame(), 
      GetArenaForAllocation());
  }
  reference_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_frame().empty()) {
    reference_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_state()) {
    state_ = new ::state_representation::proto::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.Jacobian)
}

void Jacobian::SharedCtor() {
frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reference_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cols_) -
    reinterpret_cast<char*>(&state_)) + sizeof(cols_));
}

Jacobian::~Jacobian() {
  // @@protoc_insertion_point(destructor:state_representation.proto.Jacobian)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Jacobian::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete state_;
}

void Jacobian::ArenaDtor(void* object) {
  Jacobian* _this = reinterpret_cast< Jacobian* >(object);
  (void)_this;
}
void Jacobian::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Jacobian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Jacobian::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.Jacobian)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_names_.Clear();
  data_.Clear();
  frame_.ClearToEmpty();
  reference_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cols_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Jacobian::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string joint_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_joint_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "state_representation.proto.Jacobian.joint_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "state_representation.proto.Jacobian.frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_reference_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "state_representation.proto.Jacobian.reference_frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cols = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Jacobian::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.Jacobian)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.State state = 1;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::state(this), target, stream);
  }

  // repeated string joint_names = 2;
  for (int i = 0, n = this->_internal_joint_names_size(); i < n; i++) {
    const auto& s = this->_internal_joint_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "state_representation.proto.Jacobian.joint_names");
    target = stream->WriteString(2, s, target);
  }

  // string frame = 3;
  if (!this->frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame().data(), static_cast<int>(this->_internal_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "state_representation.proto.Jacobian.frame");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame(), target);
  }

  // string reference_frame = 4;
  if (!this->reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_frame().data(), static_cast<int>(this->_internal_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "state_representation.proto.Jacobian.reference_frame");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reference_frame(), target);
  }

  // uint32 rows = 5;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rows(), target);
  }

  // uint32 cols = 6;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cols(), target);
  }

  // repeated double data = 7;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.Jacobian)
  return target;
}

size_t Jacobian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.Jacobian)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string joint_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(joint_names_.size());
  for (int i = 0, n = joint_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      joint_names_.Get(i));
  }

  // repeated double data = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string frame = 3;
  if (!this->frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame());
  }

  // string reference_frame = 4;
  if (!this->reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_frame());
  }

  // .state_representation.proto.State state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  // uint32 rows = 5;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rows());
  }

  // uint32 cols = 6;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cols());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Jacobian::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.Jacobian)
  GOOGLE_DCHECK_NE(&from, this);
  const Jacobian* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Jacobian>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.Jacobian)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.Jacobian)
    MergeFrom(*source);
  }
}

void Jacobian::MergeFrom(const Jacobian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.Jacobian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_names_.MergeFrom(from.joint_names_);
  data_.MergeFrom(from.data_);
  if (!from.frame().empty()) {
    _internal_set_frame(from._internal_frame());
  }
  if (!from.reference_frame().empty()) {
    _internal_set_reference_frame(from._internal_reference_frame());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::state_representation::proto::State::MergeFrom(from._internal_state());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
}

void Jacobian::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.Jacobian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jacobian::CopyFrom(const Jacobian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.Jacobian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jacobian::IsInitialized() const {
  return true;
}

void Jacobian::InternalSwap(Jacobian* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  joint_names_.InternalSwap(&other->joint_names_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_, GetArenaForAllocation(),
      &other->frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reference_frame_, GetArenaForAllocation(),
      &other->reference_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Jacobian, cols_)
      + sizeof(Jacobian::cols_)
      - PROTOBUF_FIELD_OFFSET(Jacobian, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Jacobian::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fjoint_2fjacobian_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::state_representation::proto::Jacobian* Arena::CreateMaybeMessage< ::state_representation::proto::Jacobian >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::Jacobian >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
