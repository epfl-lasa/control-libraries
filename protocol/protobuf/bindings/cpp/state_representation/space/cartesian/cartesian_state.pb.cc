// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/space/cartesian/cartesian_state.proto

#include "state_representation/space/cartesian/cartesian_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace state_representation {
namespace proto {
constexpr Vector3d::Vector3d(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3dDefaultTypeInternal {
  constexpr Vector3dDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3dDefaultTypeInternal() {}
  union {
    Vector3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3dDefaultTypeInternal _Vector3d_default_instance_;
constexpr Quaterniond::Quaterniond(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vec_(nullptr)
  , w_(0){}
struct QuaterniondDefaultTypeInternal {
  constexpr QuaterniondDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaterniondDefaultTypeInternal() {}
  union {
    Quaterniond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
constexpr CartesianState::CartesianState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spatial_state_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr)
  , linear_velocity_(nullptr)
  , angular_velocity_(nullptr)
  , linear_acceleration_(nullptr)
  , angular_acceleration_(nullptr)
  , force_(nullptr)
  , torque_(nullptr){}
struct CartesianStateDefaultTypeInternal {
  constexpr CartesianStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartesianStateDefaultTypeInternal() {}
  union {
    CartesianState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartesianStateDefaultTypeInternal _CartesianState_default_instance_;
constexpr CartesianPose::CartesianPose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spatial_state_(nullptr)
  , position_(nullptr)
  , orientation_(nullptr){}
struct CartesianPoseDefaultTypeInternal {
  constexpr CartesianPoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartesianPoseDefaultTypeInternal() {}
  union {
    CartesianPose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartesianPoseDefaultTypeInternal _CartesianPose_default_instance_;
constexpr CartesianTwist::CartesianTwist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spatial_state_(nullptr)
  , linear_velocity_(nullptr)
  , angular_velocity_(nullptr){}
struct CartesianTwistDefaultTypeInternal {
  constexpr CartesianTwistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartesianTwistDefaultTypeInternal() {}
  union {
    CartesianTwist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartesianTwistDefaultTypeInternal _CartesianTwist_default_instance_;
constexpr CartesianWrench::CartesianWrench(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spatial_state_(nullptr)
  , force_(nullptr)
  , torque_(nullptr){}
struct CartesianWrenchDefaultTypeInternal {
  constexpr CartesianWrenchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartesianWrenchDefaultTypeInternal() {}
  union {
    CartesianWrench _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartesianWrenchDefaultTypeInternal _CartesianWrench_default_instance_;
}  // namespace proto
}  // namespace state_representation
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Vector3d, x_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Vector3d, y_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Vector3d, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Quaterniond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Quaterniond, w_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Quaterniond, vec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, spatial_state_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, position_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, orientation_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, angular_acceleration_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, force_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianState, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianPose, spatial_state_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianPose, position_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianPose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianTwist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianTwist, spatial_state_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianTwist, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianTwist, angular_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianWrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianWrench, spatial_state_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianWrench, force_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::CartesianWrench, torque_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::state_representation::proto::Vector3d)},
  { 8, -1, sizeof(::state_representation::proto::Quaterniond)},
  { 15, -1, sizeof(::state_representation::proto::CartesianState)},
  { 29, -1, sizeof(::state_representation::proto::CartesianPose)},
  { 37, -1, sizeof(::state_representation::proto::CartesianTwist)},
  { 45, -1, sizeof(::state_representation::proto::CartesianWrench)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_Vector3d_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_Quaterniond_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_CartesianState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_CartesianPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_CartesianTwist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_CartesianWrench_default_instance_),
};

const char descriptor_table_protodef_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:state_representation/space/cartesian/c"
  "artesian_state.proto\022\032state_representati"
  "on.proto\032.state_representation/space/spa"
  "tial_state.proto\"+\n\010Vector3d\022\t\n\001x\030\001 \001(\001\022"
  "\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"K\n\013Quaterniond\022\t\n\001"
  "w\030\001 \001(\001\0221\n\003vec\030\002 \001(\0132$.state_representat"
  "ion.proto.Vector3d\"\270\004\n\016CartesianState\022\?\n"
  "\rspatial_state\030\001 \001(\0132(.state_representat"
  "ion.proto.SpatialState\0226\n\010position\030\002 \001(\013"
  "2$.state_representation.proto.Vector3d\022<"
  "\n\013orientation\030\003 \001(\0132\'.state_representati"
  "on.proto.Quaterniond\022=\n\017linear_velocity\030"
  "\004 \001(\0132$.state_representation.proto.Vecto"
  "r3d\022>\n\020angular_velocity\030\005 \001(\0132$.state_re"
  "presentation.proto.Vector3d\022A\n\023linear_ac"
  "celeration\030\006 \001(\0132$.state_representation."
  "proto.Vector3d\022B\n\024angular_acceleration\030\007"
  " \001(\0132$.state_representation.proto.Vector"
  "3d\0223\n\005force\030\010 \001(\0132$.state_representation"
  ".proto.Vector3d\0224\n\006torque\030\t \001(\0132$.state_"
  "representation.proto.Vector3d\"\306\001\n\rCartes"
  "ianPose\022\?\n\rspatial_state\030\001 \001(\0132(.state_r"
  "epresentation.proto.SpatialState\0226\n\010posi"
  "tion\030\002 \001(\0132$.state_representation.proto."
  "Vector3d\022<\n\013orientation\030\003 \001(\0132\'.state_re"
  "presentation.proto.Quaterniond\"\320\001\n\016Carte"
  "sianTwist\022\?\n\rspatial_state\030\001 \001(\0132(.state"
  "_representation.proto.SpatialState\022=\n\017li"
  "near_velocity\030\004 \001(\0132$.state_representati"
  "on.proto.Vector3d\022>\n\020angular_velocity\030\005 "
  "\001(\0132$.state_representation.proto.Vector3"
  "d\"\275\001\n\017CartesianWrench\022\?\n\rspatial_state\030\001"
  " \001(\0132(.state_representation.proto.Spatia"
  "lState\0223\n\005force\030\010 \001(\0132$.state_representa"
  "tion.proto.Vector3d\0224\n\006torque\030\t \001(\0132$.st"
  "ate_representation.proto.Vector3db\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_deps[1] = {
  &::descriptor_table_state_5frepresentation_2fspace_2fspatial_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto = {
  false, false, 1441, descriptor_table_protodef_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto, "state_representation/space/cartesian/cartesian_state.proto", 
  &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once, descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto::offsets,
  file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto, file_level_enum_descriptors_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto, file_level_service_descriptors_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter() {
  return &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto(&descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto);
namespace state_representation {
namespace proto {

// ===================================================================

class Vector3d::_Internal {
 public:
};

Vector3d::Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.Vector3d)
}

void Vector3d::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:state_representation.proto.Vector3d)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3d::ArenaDtor(void* object) {
  Vector3d* _this = reinterpret_cast< Vector3d* >(object);
  (void)_this;
}
void Vector3d::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3d::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3d::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.Vector3d)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.Vector3d)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3d::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3d* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3d>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.Vector3d)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3d::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3d, z_)
      + sizeof(Vector3d::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3d, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3d::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[0]);
}

// ===================================================================

class Quaterniond::_Internal {
 public:
  static const ::state_representation::proto::Vector3d& vec(const Quaterniond* msg);
};

const ::state_representation::proto::Vector3d&
Quaterniond::_Internal::vec(const Quaterniond* msg) {
  return *msg->vec_;
}
Quaterniond::Quaterniond(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.Quaterniond)
}
Quaterniond::Quaterniond(const Quaterniond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vec()) {
    vec_ = new ::state_representation::proto::Vector3d(*from.vec_);
  } else {
    vec_ = nullptr;
  }
  w_ = from.w_;
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.Quaterniond)
}

void Quaterniond::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&vec_)) + sizeof(w_));
}

Quaterniond::~Quaterniond() {
  // @@protoc_insertion_point(destructor:state_representation.proto.Quaterniond)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaterniond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vec_;
}

void Quaterniond::ArenaDtor(void* object) {
  Quaterniond* _this = reinterpret_cast< Quaterniond* >(object);
  (void)_this;
}
void Quaterniond::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaterniond::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaterniond::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.Quaterniond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vec_ != nullptr) {
    delete vec_;
  }
  vec_ = nullptr;
  w_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaterniond::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d vec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaterniond::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.Quaterniond)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // .state_representation.proto.Vector3d vec = 2;
  if (this->has_vec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vec(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.Quaterniond)
  return target;
}

size_t Quaterniond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.Quaterniond)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .state_representation.proto.Vector3d vec = 2;
  if (this->has_vec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vec_);
  }

  // double w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaterniond::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.Quaterniond)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaterniond* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaterniond>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.Quaterniond)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.Quaterniond)
    MergeFrom(*source);
  }
}

void Quaterniond::MergeFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.Quaterniond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vec()) {
    _internal_mutable_vec()->::state_representation::proto::Vector3d::MergeFrom(from._internal_vec());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Quaterniond::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaterniond::CopyFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaterniond::IsInitialized() const {
  return true;
}

void Quaterniond::InternalSwap(Quaterniond* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaterniond, w_)
      + sizeof(Quaterniond::w_)
      - PROTOBUF_FIELD_OFFSET(Quaterniond, vec_)>(
          reinterpret_cast<char*>(&vec_),
          reinterpret_cast<char*>(&other->vec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaterniond::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[1]);
}

// ===================================================================

class CartesianState::_Internal {
 public:
  static const ::state_representation::proto::SpatialState& spatial_state(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& position(const CartesianState* msg);
  static const ::state_representation::proto::Quaterniond& orientation(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& linear_velocity(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& angular_velocity(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& linear_acceleration(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& angular_acceleration(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& force(const CartesianState* msg);
  static const ::state_representation::proto::Vector3d& torque(const CartesianState* msg);
};

const ::state_representation::proto::SpatialState&
CartesianState::_Internal::spatial_state(const CartesianState* msg) {
  return *msg->spatial_state_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::position(const CartesianState* msg) {
  return *msg->position_;
}
const ::state_representation::proto::Quaterniond&
CartesianState::_Internal::orientation(const CartesianState* msg) {
  return *msg->orientation_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::linear_velocity(const CartesianState* msg) {
  return *msg->linear_velocity_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::angular_velocity(const CartesianState* msg) {
  return *msg->angular_velocity_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::linear_acceleration(const CartesianState* msg) {
  return *msg->linear_acceleration_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::angular_acceleration(const CartesianState* msg) {
  return *msg->angular_acceleration_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::force(const CartesianState* msg) {
  return *msg->force_;
}
const ::state_representation::proto::Vector3d&
CartesianState::_Internal::torque(const CartesianState* msg) {
  return *msg->torque_;
}
void CartesianState::clear_spatial_state() {
  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
}
CartesianState::CartesianState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.CartesianState)
}
CartesianState::CartesianState(const CartesianState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spatial_state()) {
    spatial_state_ = new ::state_representation::proto::SpatialState(*from.spatial_state_);
  } else {
    spatial_state_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::state_representation::proto::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::state_representation::proto::Quaterniond(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::state_representation::proto::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::state_representation::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::state_representation::proto::Vector3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_acceleration()) {
    angular_acceleration_ = new ::state_representation::proto::Vector3d(*from.angular_acceleration_);
  } else {
    angular_acceleration_ = nullptr;
  }
  if (from._internal_has_force()) {
    force_ = new ::state_representation::proto::Vector3d(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_torque()) {
    torque_ = new ::state_representation::proto::Vector3d(*from.torque_);
  } else {
    torque_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.CartesianState)
}

void CartesianState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spatial_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&spatial_state_)) + sizeof(torque_));
}

CartesianState::~CartesianState() {
  // @@protoc_insertion_point(destructor:state_representation.proto.CartesianState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spatial_state_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_acceleration_;
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete torque_;
}

void CartesianState::ArenaDtor(void* object) {
  CartesianState* _this = reinterpret_cast< CartesianState* >(object);
  (void)_this;
}
void CartesianState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartesianState::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.CartesianState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_acceleration_ != nullptr) {
    delete angular_acceleration_;
  }
  angular_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.SpatialState spatial_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Quaterniond orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d linear_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d angular_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d linear_acceleration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d angular_acceleration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d force = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d torque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.CartesianState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spatial_state(this), target, stream);
  }

  // .state_representation.proto.Vector3d position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .state_representation.proto.Quaterniond orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // .state_representation.proto.Vector3d linear_velocity = 4;
  if (this->has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_velocity(this), target, stream);
  }

  // .state_representation.proto.Vector3d angular_velocity = 5;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::angular_velocity(this), target, stream);
  }

  // .state_representation.proto.Vector3d linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::linear_acceleration(this), target, stream);
  }

  // .state_representation.proto.Vector3d angular_acceleration = 7;
  if (this->has_angular_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::angular_acceleration(this), target, stream);
  }

  // .state_representation.proto.Vector3d force = 8;
  if (this->has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::force(this), target, stream);
  }

  // .state_representation.proto.Vector3d torque = 9;
  if (this->has_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::torque(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.CartesianState)
  return target;
}

size_t CartesianState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.CartesianState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_state_);
  }

  // .state_representation.proto.Vector3d position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .state_representation.proto.Quaterniond orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .state_representation.proto.Vector3d linear_velocity = 4;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .state_representation.proto.Vector3d angular_velocity = 5;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .state_representation.proto.Vector3d linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .state_representation.proto.Vector3d angular_acceleration = 7;
  if (this->has_angular_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_acceleration_);
  }

  // .state_representation.proto.Vector3d force = 8;
  if (this->has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .state_representation.proto.Vector3d torque = 9;
  if (this->has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torque_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.CartesianState)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.CartesianState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.CartesianState)
    MergeFrom(*source);
  }
}

void CartesianState::MergeFrom(const CartesianState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.CartesianState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spatial_state()) {
    _internal_mutable_spatial_state()->::state_representation::proto::SpatialState::MergeFrom(from._internal_spatial_state());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::state_representation::proto::Vector3d::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::state_representation::proto::Quaterniond::MergeFrom(from._internal_orientation());
  }
  if (from.has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::state_representation::proto::Vector3d::MergeFrom(from._internal_linear_velocity());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::state_representation::proto::Vector3d::MergeFrom(from._internal_angular_velocity());
  }
  if (from.has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::state_representation::proto::Vector3d::MergeFrom(from._internal_linear_acceleration());
  }
  if (from.has_angular_acceleration()) {
    _internal_mutable_angular_acceleration()->::state_representation::proto::Vector3d::MergeFrom(from._internal_angular_acceleration());
  }
  if (from.has_force()) {
    _internal_mutable_force()->::state_representation::proto::Vector3d::MergeFrom(from._internal_force());
  }
  if (from.has_torque()) {
    _internal_mutable_torque()->::state_representation::proto::Vector3d::MergeFrom(from._internal_torque());
  }
}

void CartesianState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.CartesianState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianState::CopyFrom(const CartesianState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.CartesianState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianState::IsInitialized() const {
  return true;
}

void CartesianState::InternalSwap(CartesianState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianState, torque_)
      + sizeof(CartesianState::torque_)
      - PROTOBUF_FIELD_OFFSET(CartesianState, spatial_state_)>(
          reinterpret_cast<char*>(&spatial_state_),
          reinterpret_cast<char*>(&other->spatial_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[2]);
}

// ===================================================================

class CartesianPose::_Internal {
 public:
  static const ::state_representation::proto::SpatialState& spatial_state(const CartesianPose* msg);
  static const ::state_representation::proto::Vector3d& position(const CartesianPose* msg);
  static const ::state_representation::proto::Quaterniond& orientation(const CartesianPose* msg);
};

const ::state_representation::proto::SpatialState&
CartesianPose::_Internal::spatial_state(const CartesianPose* msg) {
  return *msg->spatial_state_;
}
const ::state_representation::proto::Vector3d&
CartesianPose::_Internal::position(const CartesianPose* msg) {
  return *msg->position_;
}
const ::state_representation::proto::Quaterniond&
CartesianPose::_Internal::orientation(const CartesianPose* msg) {
  return *msg->orientation_;
}
void CartesianPose::clear_spatial_state() {
  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
}
CartesianPose::CartesianPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.CartesianPose)
}
CartesianPose::CartesianPose(const CartesianPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spatial_state()) {
    spatial_state_ = new ::state_representation::proto::SpatialState(*from.spatial_state_);
  } else {
    spatial_state_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::state_representation::proto::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::state_representation::proto::Quaterniond(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.CartesianPose)
}

void CartesianPose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spatial_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&spatial_state_)) + sizeof(orientation_));
}

CartesianPose::~CartesianPose() {
  // @@protoc_insertion_point(destructor:state_representation.proto.CartesianPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianPose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spatial_state_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void CartesianPose::ArenaDtor(void* object) {
  CartesianPose* _this = reinterpret_cast< CartesianPose* >(object);
  (void)_this;
}
void CartesianPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartesianPose::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.CartesianPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.SpatialState spatial_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Quaterniond orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.CartesianPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spatial_state(this), target, stream);
  }

  // .state_representation.proto.Vector3d position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .state_representation.proto.Quaterniond orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.CartesianPose)
  return target;
}

size_t CartesianPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.CartesianPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_state_);
  }

  // .state_representation.proto.Vector3d position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .state_representation.proto.Quaterniond orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.CartesianPose)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.CartesianPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.CartesianPose)
    MergeFrom(*source);
  }
}

void CartesianPose::MergeFrom(const CartesianPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.CartesianPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spatial_state()) {
    _internal_mutable_spatial_state()->::state_representation::proto::SpatialState::MergeFrom(from._internal_spatial_state());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::state_representation::proto::Vector3d::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::state_representation::proto::Quaterniond::MergeFrom(from._internal_orientation());
  }
}

void CartesianPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.CartesianPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianPose::CopyFrom(const CartesianPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.CartesianPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianPose::IsInitialized() const {
  return true;
}

void CartesianPose::InternalSwap(CartesianPose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianPose, orientation_)
      + sizeof(CartesianPose::orientation_)
      - PROTOBUF_FIELD_OFFSET(CartesianPose, spatial_state_)>(
          reinterpret_cast<char*>(&spatial_state_),
          reinterpret_cast<char*>(&other->spatial_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianPose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[3]);
}

// ===================================================================

class CartesianTwist::_Internal {
 public:
  static const ::state_representation::proto::SpatialState& spatial_state(const CartesianTwist* msg);
  static const ::state_representation::proto::Vector3d& linear_velocity(const CartesianTwist* msg);
  static const ::state_representation::proto::Vector3d& angular_velocity(const CartesianTwist* msg);
};

const ::state_representation::proto::SpatialState&
CartesianTwist::_Internal::spatial_state(const CartesianTwist* msg) {
  return *msg->spatial_state_;
}
const ::state_representation::proto::Vector3d&
CartesianTwist::_Internal::linear_velocity(const CartesianTwist* msg) {
  return *msg->linear_velocity_;
}
const ::state_representation::proto::Vector3d&
CartesianTwist::_Internal::angular_velocity(const CartesianTwist* msg) {
  return *msg->angular_velocity_;
}
void CartesianTwist::clear_spatial_state() {
  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
}
CartesianTwist::CartesianTwist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.CartesianTwist)
}
CartesianTwist::CartesianTwist(const CartesianTwist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spatial_state()) {
    spatial_state_ = new ::state_representation::proto::SpatialState(*from.spatial_state_);
  } else {
    spatial_state_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::state_representation::proto::Vector3d(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::state_representation::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.CartesianTwist)
}

void CartesianTwist::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spatial_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angular_velocity_) -
    reinterpret_cast<char*>(&spatial_state_)) + sizeof(angular_velocity_));
}

CartesianTwist::~CartesianTwist() {
  // @@protoc_insertion_point(destructor:state_representation.proto.CartesianTwist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianTwist::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spatial_state_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void CartesianTwist::ArenaDtor(void* object) {
  CartesianTwist* _this = reinterpret_cast< CartesianTwist* >(object);
  (void)_this;
}
void CartesianTwist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianTwist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartesianTwist::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.CartesianTwist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianTwist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.SpatialState spatial_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d linear_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d angular_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianTwist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.CartesianTwist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spatial_state(this), target, stream);
  }

  // .state_representation.proto.Vector3d linear_velocity = 4;
  if (this->has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_velocity(this), target, stream);
  }

  // .state_representation.proto.Vector3d angular_velocity = 5;
  if (this->has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::angular_velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.CartesianTwist)
  return target;
}

size_t CartesianTwist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.CartesianTwist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_state_);
  }

  // .state_representation.proto.Vector3d linear_velocity = 4;
  if (this->has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .state_representation.proto.Vector3d angular_velocity = 5;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianTwist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.CartesianTwist)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianTwist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianTwist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.CartesianTwist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.CartesianTwist)
    MergeFrom(*source);
  }
}

void CartesianTwist::MergeFrom(const CartesianTwist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.CartesianTwist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spatial_state()) {
    _internal_mutable_spatial_state()->::state_representation::proto::SpatialState::MergeFrom(from._internal_spatial_state());
  }
  if (from.has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::state_representation::proto::Vector3d::MergeFrom(from._internal_linear_velocity());
  }
  if (from.has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::state_representation::proto::Vector3d::MergeFrom(from._internal_angular_velocity());
  }
}

void CartesianTwist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.CartesianTwist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianTwist::CopyFrom(const CartesianTwist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.CartesianTwist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianTwist::IsInitialized() const {
  return true;
}

void CartesianTwist::InternalSwap(CartesianTwist* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianTwist, angular_velocity_)
      + sizeof(CartesianTwist::angular_velocity_)
      - PROTOBUF_FIELD_OFFSET(CartesianTwist, spatial_state_)>(
          reinterpret_cast<char*>(&spatial_state_),
          reinterpret_cast<char*>(&other->spatial_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianTwist::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[4]);
}

// ===================================================================

class CartesianWrench::_Internal {
 public:
  static const ::state_representation::proto::SpatialState& spatial_state(const CartesianWrench* msg);
  static const ::state_representation::proto::Vector3d& force(const CartesianWrench* msg);
  static const ::state_representation::proto::Vector3d& torque(const CartesianWrench* msg);
};

const ::state_representation::proto::SpatialState&
CartesianWrench::_Internal::spatial_state(const CartesianWrench* msg) {
  return *msg->spatial_state_;
}
const ::state_representation::proto::Vector3d&
CartesianWrench::_Internal::force(const CartesianWrench* msg) {
  return *msg->force_;
}
const ::state_representation::proto::Vector3d&
CartesianWrench::_Internal::torque(const CartesianWrench* msg) {
  return *msg->torque_;
}
void CartesianWrench::clear_spatial_state() {
  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
}
CartesianWrench::CartesianWrench(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.CartesianWrench)
}
CartesianWrench::CartesianWrench(const CartesianWrench& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spatial_state()) {
    spatial_state_ = new ::state_representation::proto::SpatialState(*from.spatial_state_);
  } else {
    spatial_state_ = nullptr;
  }
  if (from._internal_has_force()) {
    force_ = new ::state_representation::proto::Vector3d(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_torque()) {
    torque_ = new ::state_representation::proto::Vector3d(*from.torque_);
  } else {
    torque_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.CartesianWrench)
}

void CartesianWrench::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spatial_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&spatial_state_)) + sizeof(torque_));
}

CartesianWrench::~CartesianWrench() {
  // @@protoc_insertion_point(destructor:state_representation.proto.CartesianWrench)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CartesianWrench::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spatial_state_;
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete torque_;
}

void CartesianWrench::ArenaDtor(void* object) {
  CartesianWrench* _this = reinterpret_cast< CartesianWrench* >(object);
  (void)_this;
}
void CartesianWrench::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianWrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartesianWrench::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.CartesianWrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spatial_state_ != nullptr) {
    delete spatial_state_;
  }
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianWrench::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.SpatialState spatial_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d force = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .state_representation.proto.Vector3d torque = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CartesianWrench::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.CartesianWrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spatial_state(this), target, stream);
  }

  // .state_representation.proto.Vector3d force = 8;
  if (this->has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::force(this), target, stream);
  }

  // .state_representation.proto.Vector3d torque = 9;
  if (this->has_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::torque(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.CartesianWrench)
  return target;
}

size_t CartesianWrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.CartesianWrench)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .state_representation.proto.SpatialState spatial_state = 1;
  if (this->has_spatial_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_state_);
  }

  // .state_representation.proto.Vector3d force = 8;
  if (this->has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .state_representation.proto.Vector3d torque = 9;
  if (this->has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torque_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CartesianWrench::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.CartesianWrench)
  GOOGLE_DCHECK_NE(&from, this);
  const CartesianWrench* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CartesianWrench>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.CartesianWrench)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.CartesianWrench)
    MergeFrom(*source);
  }
}

void CartesianWrench::MergeFrom(const CartesianWrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.CartesianWrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spatial_state()) {
    _internal_mutable_spatial_state()->::state_representation::proto::SpatialState::MergeFrom(from._internal_spatial_state());
  }
  if (from.has_force()) {
    _internal_mutable_force()->::state_representation::proto::Vector3d::MergeFrom(from._internal_force());
  }
  if (from.has_torque()) {
    _internal_mutable_torque()->::state_representation::proto::Vector3d::MergeFrom(from._internal_torque());
  }
}

void CartesianWrench::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.CartesianWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CartesianWrench::CopyFrom(const CartesianWrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.CartesianWrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianWrench::IsInitialized() const {
  return true;
}

void CartesianWrench::InternalSwap(CartesianWrench* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianWrench, torque_)
      + sizeof(CartesianWrench::torque_)
      - PROTOBUF_FIELD_OFFSET(CartesianWrench, spatial_state_)>(
          reinterpret_cast<char*>(&spatial_state_),
          reinterpret_cast<char*>(&other->spatial_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianWrench::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_getter, &descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto_once,
      file_level_metadata_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::state_representation::proto::Vector3d* Arena::CreateMaybeMessage< ::state_representation::proto::Vector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::Vector3d >(arena);
}
template<> PROTOBUF_NOINLINE ::state_representation::proto::Quaterniond* Arena::CreateMaybeMessage< ::state_representation::proto::Quaterniond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::Quaterniond >(arena);
}
template<> PROTOBUF_NOINLINE ::state_representation::proto::CartesianState* Arena::CreateMaybeMessage< ::state_representation::proto::CartesianState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::CartesianState >(arena);
}
template<> PROTOBUF_NOINLINE ::state_representation::proto::CartesianPose* Arena::CreateMaybeMessage< ::state_representation::proto::CartesianPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::CartesianPose >(arena);
}
template<> PROTOBUF_NOINLINE ::state_representation::proto::CartesianTwist* Arena::CreateMaybeMessage< ::state_representation::proto::CartesianTwist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::CartesianTwist >(arena);
}
template<> PROTOBUF_NOINLINE ::state_representation::proto::CartesianWrench* Arena::CreateMaybeMessage< ::state_representation::proto::CartesianWrench >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::CartesianWrench >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
