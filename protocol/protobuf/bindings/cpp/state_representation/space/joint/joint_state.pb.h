// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/space/joint/joint_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state_representation/state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto;
namespace state_representation {
namespace proto {
class JointPositions;
struct JointPositionsDefaultTypeInternal;
extern JointPositionsDefaultTypeInternal _JointPositions_default_instance_;
class JointState;
struct JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
class JointTorques;
struct JointTorquesDefaultTypeInternal;
extern JointTorquesDefaultTypeInternal _JointTorques_default_instance_;
class JointVelocities;
struct JointVelocitiesDefaultTypeInternal;
extern JointVelocitiesDefaultTypeInternal _JointVelocities_default_instance_;
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> ::state_representation::proto::JointPositions* Arena::CreateMaybeMessage<::state_representation::proto::JointPositions>(Arena*);
template<> ::state_representation::proto::JointState* Arena::CreateMaybeMessage<::state_representation::proto::JointState>(Arena*);
template<> ::state_representation::proto::JointTorques* Arena::CreateMaybeMessage<::state_representation::proto::JointTorques>(Arena*);
template<> ::state_representation::proto::JointVelocities* Arena::CreateMaybeMessage<::state_representation::proto::JointVelocities>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace state_representation {
namespace proto {

// ===================================================================

class JointState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.JointState) */ {
 public:
  inline JointState() : JointState(nullptr) {}
  ~JointState() override;
  explicit constexpr JointState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointState(const JointState& from);
  JointState(JointState&& from) noexcept
    : JointState() {
    *this = ::std::move(from);
  }

  inline JointState& operator=(const JointState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointState& operator=(JointState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointState& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointState* internal_default_instance() {
    return reinterpret_cast<const JointState*>(
               &_JointState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JointState& a, JointState& b) {
    a.Swap(&b);
  }
  inline void Swap(JointState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointState* New() const final {
    return new JointState();
  }

  JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointState& from);
  void MergeFrom(const JointState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.JointState";
  }
  protected:
  explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointNamesFieldNumber = 2,
    kPositionsFieldNumber = 3,
    kVelocitiesFieldNumber = 4,
    kAccelerationsFieldNumber = 5,
    kTorquesFieldNumber = 6,
    kStateFieldNumber = 1,
  };
  // repeated string joint_names = 2;
  int joint_names_size() const;
  private:
  int _internal_joint_names_size() const;
  public:
  void clear_joint_names();
  const std::string& joint_names(int index) const;
  std::string* mutable_joint_names(int index);
  void set_joint_names(int index, const std::string& value);
  void set_joint_names(int index, std::string&& value);
  void set_joint_names(int index, const char* value);
  void set_joint_names(int index, const char* value, size_t size);
  std::string* add_joint_names();
  void add_joint_names(const std::string& value);
  void add_joint_names(std::string&& value);
  void add_joint_names(const char* value);
  void add_joint_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& joint_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_joint_names();
  private:
  const std::string& _internal_joint_names(int index) const;
  std::string* _internal_add_joint_names();
  public:

  // repeated double positions = 3;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  private:
  double _internal_positions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_positions() const;
  void _internal_add_positions(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_positions();
  public:
  double positions(int index) const;
  void set_positions(int index, double value);
  void add_positions(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_positions();

  // repeated double velocities = 4;
  int velocities_size() const;
  private:
  int _internal_velocities_size() const;
  public:
  void clear_velocities();
  private:
  double _internal_velocities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocities() const;
  void _internal_add_velocities(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocities();
  public:
  double velocities(int index) const;
  void set_velocities(int index, double value);
  void add_velocities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocities();

  // repeated double accelerations = 5;
  int accelerations_size() const;
  private:
  int _internal_accelerations_size() const;
  public:
  void clear_accelerations();
  private:
  double _internal_accelerations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_accelerations() const;
  void _internal_add_accelerations(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_accelerations();
  public:
  double accelerations(int index) const;
  void set_accelerations(int index, double value);
  void add_accelerations(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      accelerations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_accelerations();

  // repeated double torques = 6;
  int torques_size() const;
  private:
  int _internal_torques_size() const;
  public:
  void clear_torques();
  private:
  double _internal_torques(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_torques() const;
  void _internal_add_torques(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_torques();
  public:
  double torques(int index) const;
  void set_torques(int index, double value);
  void add_torques(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      torques() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_torques();

  // .state_representation.proto.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::state_representation::proto::State& state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::State* release_state();
  ::state_representation::proto::State* mutable_state();
  void set_allocated_state(::state_representation::proto::State* state);
  private:
  const ::state_representation::proto::State& _internal_state() const;
  ::state_representation::proto::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::state_representation::proto::State* state);
  ::state_representation::proto::State* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:state_representation.proto.JointState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> joint_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > positions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > accelerations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > torques_;
  ::state_representation::proto::State* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto;
};
// -------------------------------------------------------------------

class JointPositions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.JointPositions) */ {
 public:
  inline JointPositions() : JointPositions(nullptr) {}
  ~JointPositions() override;
  explicit constexpr JointPositions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointPositions(const JointPositions& from);
  JointPositions(JointPositions&& from) noexcept
    : JointPositions() {
    *this = ::std::move(from);
  }

  inline JointPositions& operator=(const JointPositions& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPositions& operator=(JointPositions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointPositions& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointPositions* internal_default_instance() {
    return reinterpret_cast<const JointPositions*>(
               &_JointPositions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(JointPositions& a, JointPositions& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPositions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointPositions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointPositions* New() const final {
    return new JointPositions();
  }

  JointPositions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointPositions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointPositions& from);
  void MergeFrom(const JointPositions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPositions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.JointPositions";
  }
  protected:
  explicit JointPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointNamesFieldNumber = 2,
    kPositionsFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // repeated string joint_names = 2;
  int joint_names_size() const;
  private:
  int _internal_joint_names_size() const;
  public:
  void clear_joint_names();
  const std::string& joint_names(int index) const;
  std::string* mutable_joint_names(int index);
  void set_joint_names(int index, const std::string& value);
  void set_joint_names(int index, std::string&& value);
  void set_joint_names(int index, const char* value);
  void set_joint_names(int index, const char* value, size_t size);
  std::string* add_joint_names();
  void add_joint_names(const std::string& value);
  void add_joint_names(std::string&& value);
  void add_joint_names(const char* value);
  void add_joint_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& joint_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_joint_names();
  private:
  const std::string& _internal_joint_names(int index) const;
  std::string* _internal_add_joint_names();
  public:

  // repeated double positions = 3;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  private:
  double _internal_positions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_positions() const;
  void _internal_add_positions(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_positions();
  public:
  double positions(int index) const;
  void set_positions(int index, double value);
  void add_positions(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_positions();

  // .state_representation.proto.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::state_representation::proto::State& state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::State* release_state();
  ::state_representation::proto::State* mutable_state();
  void set_allocated_state(::state_representation::proto::State* state);
  private:
  const ::state_representation::proto::State& _internal_state() const;
  ::state_representation::proto::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::state_representation::proto::State* state);
  ::state_representation::proto::State* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:state_representation.proto.JointPositions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> joint_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > positions_;
  ::state_representation::proto::State* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto;
};
// -------------------------------------------------------------------

class JointVelocities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.JointVelocities) */ {
 public:
  inline JointVelocities() : JointVelocities(nullptr) {}
  ~JointVelocities() override;
  explicit constexpr JointVelocities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointVelocities(const JointVelocities& from);
  JointVelocities(JointVelocities&& from) noexcept
    : JointVelocities() {
    *this = ::std::move(from);
  }

  inline JointVelocities& operator=(const JointVelocities& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointVelocities& operator=(JointVelocities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointVelocities& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointVelocities* internal_default_instance() {
    return reinterpret_cast<const JointVelocities*>(
               &_JointVelocities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JointVelocities& a, JointVelocities& b) {
    a.Swap(&b);
  }
  inline void Swap(JointVelocities* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointVelocities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointVelocities* New() const final {
    return new JointVelocities();
  }

  JointVelocities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointVelocities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointVelocities& from);
  void MergeFrom(const JointVelocities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointVelocities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.JointVelocities";
  }
  protected:
  explicit JointVelocities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointNamesFieldNumber = 2,
    kVelocitiesFieldNumber = 4,
    kStateFieldNumber = 1,
  };
  // repeated string joint_names = 2;
  int joint_names_size() const;
  private:
  int _internal_joint_names_size() const;
  public:
  void clear_joint_names();
  const std::string& joint_names(int index) const;
  std::string* mutable_joint_names(int index);
  void set_joint_names(int index, const std::string& value);
  void set_joint_names(int index, std::string&& value);
  void set_joint_names(int index, const char* value);
  void set_joint_names(int index, const char* value, size_t size);
  std::string* add_joint_names();
  void add_joint_names(const std::string& value);
  void add_joint_names(std::string&& value);
  void add_joint_names(const char* value);
  void add_joint_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& joint_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_joint_names();
  private:
  const std::string& _internal_joint_names(int index) const;
  std::string* _internal_add_joint_names();
  public:

  // repeated double velocities = 4;
  int velocities_size() const;
  private:
  int _internal_velocities_size() const;
  public:
  void clear_velocities();
  private:
  double _internal_velocities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocities() const;
  void _internal_add_velocities(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocities();
  public:
  double velocities(int index) const;
  void set_velocities(int index, double value);
  void add_velocities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocities();

  // .state_representation.proto.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::state_representation::proto::State& state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::State* release_state();
  ::state_representation::proto::State* mutable_state();
  void set_allocated_state(::state_representation::proto::State* state);
  private:
  const ::state_representation::proto::State& _internal_state() const;
  ::state_representation::proto::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::state_representation::proto::State* state);
  ::state_representation::proto::State* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:state_representation.proto.JointVelocities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> joint_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocities_;
  ::state_representation::proto::State* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto;
};
// -------------------------------------------------------------------

class JointTorques final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.JointTorques) */ {
 public:
  inline JointTorques() : JointTorques(nullptr) {}
  ~JointTorques() override;
  explicit constexpr JointTorques(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointTorques(const JointTorques& from);
  JointTorques(JointTorques&& from) noexcept
    : JointTorques() {
    *this = ::std::move(from);
  }

  inline JointTorques& operator=(const JointTorques& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointTorques& operator=(JointTorques&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointTorques& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointTorques* internal_default_instance() {
    return reinterpret_cast<const JointTorques*>(
               &_JointTorques_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JointTorques& a, JointTorques& b) {
    a.Swap(&b);
  }
  inline void Swap(JointTorques* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointTorques* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointTorques* New() const final {
    return new JointTorques();
  }

  JointTorques* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointTorques>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointTorques& from);
  void MergeFrom(const JointTorques& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointTorques* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.JointTorques";
  }
  protected:
  explicit JointTorques(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJointNamesFieldNumber = 2,
    kTorquesFieldNumber = 6,
    kStateFieldNumber = 1,
  };
  // repeated string joint_names = 2;
  int joint_names_size() const;
  private:
  int _internal_joint_names_size() const;
  public:
  void clear_joint_names();
  const std::string& joint_names(int index) const;
  std::string* mutable_joint_names(int index);
  void set_joint_names(int index, const std::string& value);
  void set_joint_names(int index, std::string&& value);
  void set_joint_names(int index, const char* value);
  void set_joint_names(int index, const char* value, size_t size);
  std::string* add_joint_names();
  void add_joint_names(const std::string& value);
  void add_joint_names(std::string&& value);
  void add_joint_names(const char* value);
  void add_joint_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& joint_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_joint_names();
  private:
  const std::string& _internal_joint_names(int index) const;
  std::string* _internal_add_joint_names();
  public:

  // repeated double torques = 6;
  int torques_size() const;
  private:
  int _internal_torques_size() const;
  public:
  void clear_torques();
  private:
  double _internal_torques(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_torques() const;
  void _internal_add_torques(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_torques();
  public:
  double torques(int index) const;
  void set_torques(int index, double value);
  void add_torques(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      torques() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_torques();

  // .state_representation.proto.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::state_representation::proto::State& state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::State* release_state();
  ::state_representation::proto::State* mutable_state();
  void set_allocated_state(::state_representation::proto::State* state);
  private:
  const ::state_representation::proto::State& _internal_state() const;
  ::state_representation::proto::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::state_representation::proto::State* state);
  ::state_representation::proto::State* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:state_representation.proto.JointTorques)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> joint_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > torques_;
  ::state_representation::proto::State* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JointState

// .state_representation.proto.State state = 1;
inline bool JointState::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool JointState::has_state() const {
  return _internal_has_state();
}
inline const ::state_representation::proto::State& JointState::_internal_state() const {
  const ::state_representation::proto::State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::State&>(
      ::state_representation::proto::_State_default_instance_);
}
inline const ::state_representation::proto::State& JointState::state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointState.state)
  return _internal_state();
}
inline void JointState::unsafe_arena_set_allocated_state(
    ::state_representation::proto::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.JointState.state)
}
inline ::state_representation::proto::State* JointState::release_state() {
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::State* JointState::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.JointState.state)
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::State* JointState::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::state_representation::proto::State* JointState::mutable_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointState.state)
  return _internal_mutable_state();
}
inline void JointState::set_allocated_state(::state_representation::proto::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.JointState.state)
}

// repeated string joint_names = 2;
inline int JointState::_internal_joint_names_size() const {
  return joint_names_.size();
}
inline int JointState::joint_names_size() const {
  return _internal_joint_names_size();
}
inline void JointState::clear_joint_names() {
  joint_names_.Clear();
}
inline std::string* JointState::add_joint_names() {
  // @@protoc_insertion_point(field_add_mutable:state_representation.proto.JointState.joint_names)
  return _internal_add_joint_names();
}
inline const std::string& JointState::_internal_joint_names(int index) const {
  return joint_names_.Get(index);
}
inline const std::string& JointState::joint_names(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointState.joint_names)
  return _internal_joint_names(index);
}
inline std::string* JointState::mutable_joint_names(int index) {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointState.joint_names)
  return joint_names_.Mutable(index);
}
inline void JointState::set_joint_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointState.joint_names)
  joint_names_.Mutable(index)->assign(value);
}
inline void JointState::set_joint_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointState.joint_names)
  joint_names_.Mutable(index)->assign(std::move(value));
}
inline void JointState::set_joint_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:state_representation.proto.JointState.joint_names)
}
inline void JointState::set_joint_names(int index, const char* value, size_t size) {
  joint_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:state_representation.proto.JointState.joint_names)
}
inline std::string* JointState::_internal_add_joint_names() {
  return joint_names_.Add();
}
inline void JointState::add_joint_names(const std::string& value) {
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointState.joint_names)
}
inline void JointState::add_joint_names(std::string&& value) {
  joint_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:state_representation.proto.JointState.joint_names)
}
inline void JointState::add_joint_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:state_representation.proto.JointState.joint_names)
}
inline void JointState::add_joint_names(const char* value, size_t size) {
  joint_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:state_representation.proto.JointState.joint_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointState::joint_names() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointState.joint_names)
  return joint_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointState::mutable_joint_names() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointState.joint_names)
  return &joint_names_;
}

// repeated double positions = 3;
inline int JointState::_internal_positions_size() const {
  return positions_.size();
}
inline int JointState::positions_size() const {
  return _internal_positions_size();
}
inline void JointState::clear_positions() {
  positions_.Clear();
}
inline double JointState::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline double JointState::positions(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointState.positions)
  return _internal_positions(index);
}
inline void JointState::set_positions(int index, double value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointState.positions)
}
inline void JointState::_internal_add_positions(double value) {
  positions_.Add(value);
}
inline void JointState::add_positions(double value) {
  _internal_add_positions(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointState.positions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_positions() const {
  return positions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::positions() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointState.positions)
  return _internal_positions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_positions() {
  return &positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointState.positions)
  return _internal_mutable_positions();
}

// repeated double velocities = 4;
inline int JointState::_internal_velocities_size() const {
  return velocities_.size();
}
inline int JointState::velocities_size() const {
  return _internal_velocities_size();
}
inline void JointState::clear_velocities() {
  velocities_.Clear();
}
inline double JointState::_internal_velocities(int index) const {
  return velocities_.Get(index);
}
inline double JointState::velocities(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointState.velocities)
  return _internal_velocities(index);
}
inline void JointState::set_velocities(int index, double value) {
  velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointState.velocities)
}
inline void JointState::_internal_add_velocities(double value) {
  velocities_.Add(value);
}
inline void JointState::add_velocities(double value) {
  _internal_add_velocities(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointState.velocities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_velocities() const {
  return velocities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::velocities() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointState.velocities)
  return _internal_velocities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_velocities() {
  return &velocities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_velocities() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointState.velocities)
  return _internal_mutable_velocities();
}

// repeated double accelerations = 5;
inline int JointState::_internal_accelerations_size() const {
  return accelerations_.size();
}
inline int JointState::accelerations_size() const {
  return _internal_accelerations_size();
}
inline void JointState::clear_accelerations() {
  accelerations_.Clear();
}
inline double JointState::_internal_accelerations(int index) const {
  return accelerations_.Get(index);
}
inline double JointState::accelerations(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointState.accelerations)
  return _internal_accelerations(index);
}
inline void JointState::set_accelerations(int index, double value) {
  accelerations_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointState.accelerations)
}
inline void JointState::_internal_add_accelerations(double value) {
  accelerations_.Add(value);
}
inline void JointState::add_accelerations(double value) {
  _internal_add_accelerations(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointState.accelerations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_accelerations() const {
  return accelerations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::accelerations() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointState.accelerations)
  return _internal_accelerations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_accelerations() {
  return &accelerations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_accelerations() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointState.accelerations)
  return _internal_mutable_accelerations();
}

// repeated double torques = 6;
inline int JointState::_internal_torques_size() const {
  return torques_.size();
}
inline int JointState::torques_size() const {
  return _internal_torques_size();
}
inline void JointState::clear_torques() {
  torques_.Clear();
}
inline double JointState::_internal_torques(int index) const {
  return torques_.Get(index);
}
inline double JointState::torques(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointState.torques)
  return _internal_torques(index);
}
inline void JointState::set_torques(int index, double value) {
  torques_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointState.torques)
}
inline void JointState::_internal_add_torques(double value) {
  torques_.Add(value);
}
inline void JointState::add_torques(double value) {
  _internal_add_torques(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointState.torques)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_torques() const {
  return torques_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::torques() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointState.torques)
  return _internal_torques();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_torques() {
  return &torques_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_torques() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointState.torques)
  return _internal_mutable_torques();
}

// -------------------------------------------------------------------

// JointPositions

// .state_representation.proto.State state = 1;
inline bool JointPositions::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool JointPositions::has_state() const {
  return _internal_has_state();
}
inline const ::state_representation::proto::State& JointPositions::_internal_state() const {
  const ::state_representation::proto::State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::State&>(
      ::state_representation::proto::_State_default_instance_);
}
inline const ::state_representation::proto::State& JointPositions::state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointPositions.state)
  return _internal_state();
}
inline void JointPositions::unsafe_arena_set_allocated_state(
    ::state_representation::proto::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.JointPositions.state)
}
inline ::state_representation::proto::State* JointPositions::release_state() {
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::State* JointPositions::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.JointPositions.state)
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::State* JointPositions::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::state_representation::proto::State* JointPositions::mutable_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointPositions.state)
  return _internal_mutable_state();
}
inline void JointPositions::set_allocated_state(::state_representation::proto::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.JointPositions.state)
}

// repeated string joint_names = 2;
inline int JointPositions::_internal_joint_names_size() const {
  return joint_names_.size();
}
inline int JointPositions::joint_names_size() const {
  return _internal_joint_names_size();
}
inline void JointPositions::clear_joint_names() {
  joint_names_.Clear();
}
inline std::string* JointPositions::add_joint_names() {
  // @@protoc_insertion_point(field_add_mutable:state_representation.proto.JointPositions.joint_names)
  return _internal_add_joint_names();
}
inline const std::string& JointPositions::_internal_joint_names(int index) const {
  return joint_names_.Get(index);
}
inline const std::string& JointPositions::joint_names(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointPositions.joint_names)
  return _internal_joint_names(index);
}
inline std::string* JointPositions::mutable_joint_names(int index) {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointPositions.joint_names)
  return joint_names_.Mutable(index);
}
inline void JointPositions::set_joint_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointPositions.joint_names)
  joint_names_.Mutable(index)->assign(value);
}
inline void JointPositions::set_joint_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointPositions.joint_names)
  joint_names_.Mutable(index)->assign(std::move(value));
}
inline void JointPositions::set_joint_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:state_representation.proto.JointPositions.joint_names)
}
inline void JointPositions::set_joint_names(int index, const char* value, size_t size) {
  joint_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:state_representation.proto.JointPositions.joint_names)
}
inline std::string* JointPositions::_internal_add_joint_names() {
  return joint_names_.Add();
}
inline void JointPositions::add_joint_names(const std::string& value) {
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointPositions.joint_names)
}
inline void JointPositions::add_joint_names(std::string&& value) {
  joint_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:state_representation.proto.JointPositions.joint_names)
}
inline void JointPositions::add_joint_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:state_representation.proto.JointPositions.joint_names)
}
inline void JointPositions::add_joint_names(const char* value, size_t size) {
  joint_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:state_representation.proto.JointPositions.joint_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointPositions::joint_names() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointPositions.joint_names)
  return joint_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointPositions::mutable_joint_names() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointPositions.joint_names)
  return &joint_names_;
}

// repeated double positions = 3;
inline int JointPositions::_internal_positions_size() const {
  return positions_.size();
}
inline int JointPositions::positions_size() const {
  return _internal_positions_size();
}
inline void JointPositions::clear_positions() {
  positions_.Clear();
}
inline double JointPositions::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline double JointPositions::positions(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointPositions.positions)
  return _internal_positions(index);
}
inline void JointPositions::set_positions(int index, double value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointPositions.positions)
}
inline void JointPositions::_internal_add_positions(double value) {
  positions_.Add(value);
}
inline void JointPositions::add_positions(double value) {
  _internal_add_positions(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointPositions.positions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointPositions::_internal_positions() const {
  return positions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointPositions::positions() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointPositions.positions)
  return _internal_positions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointPositions::_internal_mutable_positions() {
  return &positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointPositions::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointPositions.positions)
  return _internal_mutable_positions();
}

// -------------------------------------------------------------------

// JointVelocities

// .state_representation.proto.State state = 1;
inline bool JointVelocities::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool JointVelocities::has_state() const {
  return _internal_has_state();
}
inline const ::state_representation::proto::State& JointVelocities::_internal_state() const {
  const ::state_representation::proto::State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::State&>(
      ::state_representation::proto::_State_default_instance_);
}
inline const ::state_representation::proto::State& JointVelocities::state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointVelocities.state)
  return _internal_state();
}
inline void JointVelocities::unsafe_arena_set_allocated_state(
    ::state_representation::proto::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.JointVelocities.state)
}
inline ::state_representation::proto::State* JointVelocities::release_state() {
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::State* JointVelocities::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.JointVelocities.state)
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::State* JointVelocities::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::state_representation::proto::State* JointVelocities::mutable_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointVelocities.state)
  return _internal_mutable_state();
}
inline void JointVelocities::set_allocated_state(::state_representation::proto::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.JointVelocities.state)
}

// repeated string joint_names = 2;
inline int JointVelocities::_internal_joint_names_size() const {
  return joint_names_.size();
}
inline int JointVelocities::joint_names_size() const {
  return _internal_joint_names_size();
}
inline void JointVelocities::clear_joint_names() {
  joint_names_.Clear();
}
inline std::string* JointVelocities::add_joint_names() {
  // @@protoc_insertion_point(field_add_mutable:state_representation.proto.JointVelocities.joint_names)
  return _internal_add_joint_names();
}
inline const std::string& JointVelocities::_internal_joint_names(int index) const {
  return joint_names_.Get(index);
}
inline const std::string& JointVelocities::joint_names(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointVelocities.joint_names)
  return _internal_joint_names(index);
}
inline std::string* JointVelocities::mutable_joint_names(int index) {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointVelocities.joint_names)
  return joint_names_.Mutable(index);
}
inline void JointVelocities::set_joint_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointVelocities.joint_names)
  joint_names_.Mutable(index)->assign(value);
}
inline void JointVelocities::set_joint_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointVelocities.joint_names)
  joint_names_.Mutable(index)->assign(std::move(value));
}
inline void JointVelocities::set_joint_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:state_representation.proto.JointVelocities.joint_names)
}
inline void JointVelocities::set_joint_names(int index, const char* value, size_t size) {
  joint_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:state_representation.proto.JointVelocities.joint_names)
}
inline std::string* JointVelocities::_internal_add_joint_names() {
  return joint_names_.Add();
}
inline void JointVelocities::add_joint_names(const std::string& value) {
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointVelocities.joint_names)
}
inline void JointVelocities::add_joint_names(std::string&& value) {
  joint_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:state_representation.proto.JointVelocities.joint_names)
}
inline void JointVelocities::add_joint_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:state_representation.proto.JointVelocities.joint_names)
}
inline void JointVelocities::add_joint_names(const char* value, size_t size) {
  joint_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:state_representation.proto.JointVelocities.joint_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointVelocities::joint_names() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointVelocities.joint_names)
  return joint_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointVelocities::mutable_joint_names() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointVelocities.joint_names)
  return &joint_names_;
}

// repeated double velocities = 4;
inline int JointVelocities::_internal_velocities_size() const {
  return velocities_.size();
}
inline int JointVelocities::velocities_size() const {
  return _internal_velocities_size();
}
inline void JointVelocities::clear_velocities() {
  velocities_.Clear();
}
inline double JointVelocities::_internal_velocities(int index) const {
  return velocities_.Get(index);
}
inline double JointVelocities::velocities(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointVelocities.velocities)
  return _internal_velocities(index);
}
inline void JointVelocities::set_velocities(int index, double value) {
  velocities_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointVelocities.velocities)
}
inline void JointVelocities::_internal_add_velocities(double value) {
  velocities_.Add(value);
}
inline void JointVelocities::add_velocities(double value) {
  _internal_add_velocities(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointVelocities.velocities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointVelocities::_internal_velocities() const {
  return velocities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointVelocities::velocities() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointVelocities.velocities)
  return _internal_velocities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointVelocities::_internal_mutable_velocities() {
  return &velocities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointVelocities::mutable_velocities() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointVelocities.velocities)
  return _internal_mutable_velocities();
}

// -------------------------------------------------------------------

// JointTorques

// .state_representation.proto.State state = 1;
inline bool JointTorques::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool JointTorques::has_state() const {
  return _internal_has_state();
}
inline const ::state_representation::proto::State& JointTorques::_internal_state() const {
  const ::state_representation::proto::State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::State&>(
      ::state_representation::proto::_State_default_instance_);
}
inline const ::state_representation::proto::State& JointTorques::state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointTorques.state)
  return _internal_state();
}
inline void JointTorques::unsafe_arena_set_allocated_state(
    ::state_representation::proto::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.JointTorques.state)
}
inline ::state_representation::proto::State* JointTorques::release_state() {
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::State* JointTorques::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.JointTorques.state)
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::State* JointTorques::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::state_representation::proto::State* JointTorques::mutable_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointTorques.state)
  return _internal_mutable_state();
}
inline void JointTorques::set_allocated_state(::state_representation::proto::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.JointTorques.state)
}

// repeated string joint_names = 2;
inline int JointTorques::_internal_joint_names_size() const {
  return joint_names_.size();
}
inline int JointTorques::joint_names_size() const {
  return _internal_joint_names_size();
}
inline void JointTorques::clear_joint_names() {
  joint_names_.Clear();
}
inline std::string* JointTorques::add_joint_names() {
  // @@protoc_insertion_point(field_add_mutable:state_representation.proto.JointTorques.joint_names)
  return _internal_add_joint_names();
}
inline const std::string& JointTorques::_internal_joint_names(int index) const {
  return joint_names_.Get(index);
}
inline const std::string& JointTorques::joint_names(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointTorques.joint_names)
  return _internal_joint_names(index);
}
inline std::string* JointTorques::mutable_joint_names(int index) {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.JointTorques.joint_names)
  return joint_names_.Mutable(index);
}
inline void JointTorques::set_joint_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointTorques.joint_names)
  joint_names_.Mutable(index)->assign(value);
}
inline void JointTorques::set_joint_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:state_representation.proto.JointTorques.joint_names)
  joint_names_.Mutable(index)->assign(std::move(value));
}
inline void JointTorques::set_joint_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:state_representation.proto.JointTorques.joint_names)
}
inline void JointTorques::set_joint_names(int index, const char* value, size_t size) {
  joint_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:state_representation.proto.JointTorques.joint_names)
}
inline std::string* JointTorques::_internal_add_joint_names() {
  return joint_names_.Add();
}
inline void JointTorques::add_joint_names(const std::string& value) {
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointTorques.joint_names)
}
inline void JointTorques::add_joint_names(std::string&& value) {
  joint_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:state_representation.proto.JointTorques.joint_names)
}
inline void JointTorques::add_joint_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  joint_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:state_representation.proto.JointTorques.joint_names)
}
inline void JointTorques::add_joint_names(const char* value, size_t size) {
  joint_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:state_representation.proto.JointTorques.joint_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointTorques::joint_names() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointTorques.joint_names)
  return joint_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointTorques::mutable_joint_names() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointTorques.joint_names)
  return &joint_names_;
}

// repeated double torques = 6;
inline int JointTorques::_internal_torques_size() const {
  return torques_.size();
}
inline int JointTorques::torques_size() const {
  return _internal_torques_size();
}
inline void JointTorques::clear_torques() {
  torques_.Clear();
}
inline double JointTorques::_internal_torques(int index) const {
  return torques_.Get(index);
}
inline double JointTorques::torques(int index) const {
  // @@protoc_insertion_point(field_get:state_representation.proto.JointTorques.torques)
  return _internal_torques(index);
}
inline void JointTorques::set_torques(int index, double value) {
  torques_.Set(index, value);
  // @@protoc_insertion_point(field_set:state_representation.proto.JointTorques.torques)
}
inline void JointTorques::_internal_add_torques(double value) {
  torques_.Add(value);
}
inline void JointTorques::add_torques(double value) {
  _internal_add_torques(value);
  // @@protoc_insertion_point(field_add:state_representation.proto.JointTorques.torques)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointTorques::_internal_torques() const {
  return torques_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointTorques::torques() const {
  // @@protoc_insertion_point(field_list:state_representation.proto.JointTorques.torques)
  return _internal_torques();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointTorques::_internal_mutable_torques() {
  return &torques_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointTorques::mutable_torques() {
  // @@protoc_insertion_point(field_mutable_list:state_representation.proto.JointTorques.torques)
  return _internal_mutable_torques();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace state_representation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fspace_2fjoint_2fjoint_5fstate_2eproto
