// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/geometry/ellipsoid.proto

#include "state_representation/geometry/ellipsoid.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace state_representation {
namespace proto {
constexpr Ellipsoid::Ellipsoid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : axis_lengths_()
  , shape_(nullptr)
  , rotation_angle_(0){}
struct EllipsoidDefaultTypeInternal {
  constexpr EllipsoidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EllipsoidDefaultTypeInternal() {}
  union {
    Ellipsoid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EllipsoidDefaultTypeInternal _Ellipsoid_default_instance_;
}  // namespace proto
}  // namespace state_representation
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_state_5frepresentation_2fgeometry_2fellipsoid_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_state_5frepresentation_2fgeometry_2fellipsoid_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_state_5frepresentation_2fgeometry_2fellipsoid_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_state_5frepresentation_2fgeometry_2fellipsoid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Ellipsoid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Ellipsoid, shape_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Ellipsoid, axis_lengths_),
  PROTOBUF_FIELD_OFFSET(::state_representation::proto::Ellipsoid, rotation_angle_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::state_representation::proto::Ellipsoid)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::state_representation::proto::_Ellipsoid_default_instance_),
};

const char descriptor_table_protodef_state_5frepresentation_2fgeometry_2fellipsoid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-state_representation/geometry/ellipsoi"
  "d.proto\022\032state_representation.proto\032)sta"
  "te_representation/geometry/shape.proto\"k"
  "\n\tEllipsoid\0220\n\005shape\030\001 \001(\0132!.state_repre"
  "sentation.proto.Shape\022\024\n\014axis_lengths\030\002 "
  "\003(\001\022\026\n\016rotation_angle\030\003 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_deps[1] = {
  &::descriptor_table_state_5frepresentation_2fgeometry_2fshape_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto = {
  false, false, 235, descriptor_table_protodef_state_5frepresentation_2fgeometry_2fellipsoid_2eproto, "state_representation/geometry/ellipsoid.proto", 
  &descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_once, descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_state_5frepresentation_2fgeometry_2fellipsoid_2eproto::offsets,
  file_level_metadata_state_5frepresentation_2fgeometry_2fellipsoid_2eproto, file_level_enum_descriptors_state_5frepresentation_2fgeometry_2fellipsoid_2eproto, file_level_service_descriptors_state_5frepresentation_2fgeometry_2fellipsoid_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_getter() {
  return &descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_state_5frepresentation_2fgeometry_2fellipsoid_2eproto(&descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto);
namespace state_representation {
namespace proto {

// ===================================================================

class Ellipsoid::_Internal {
 public:
  static const ::state_representation::proto::Shape& shape(const Ellipsoid* msg);
};

const ::state_representation::proto::Shape&
Ellipsoid::_Internal::shape(const Ellipsoid* msg) {
  return *msg->shape_;
}
void Ellipsoid::clear_shape() {
  if (GetArenaForAllocation() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
Ellipsoid::Ellipsoid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  axis_lengths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:state_representation.proto.Ellipsoid)
}
Ellipsoid::Ellipsoid(const Ellipsoid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      axis_lengths_(from.axis_lengths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::state_representation::proto::Shape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  rotation_angle_ = from.rotation_angle_;
  // @@protoc_insertion_point(copy_constructor:state_representation.proto.Ellipsoid)
}

void Ellipsoid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_angle_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(rotation_angle_));
}

Ellipsoid::~Ellipsoid() {
  // @@protoc_insertion_point(destructor:state_representation.proto.Ellipsoid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ellipsoid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}

void Ellipsoid::ArenaDtor(void* object) {
  Ellipsoid* _this = reinterpret_cast< Ellipsoid* >(object);
  (void)_this;
}
void Ellipsoid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ellipsoid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ellipsoid::Clear() {
// @@protoc_insertion_point(message_clear_start:state_representation.proto.Ellipsoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axis_lengths_.Clear();
  if (GetArenaForAllocation() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  rotation_angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ellipsoid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .state_representation.proto.Shape shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double axis_lengths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_axis_lengths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_axis_lengths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rotation_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rotation_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ellipsoid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:state_representation.proto.Ellipsoid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .state_representation.proto.Shape shape = 1;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shape(this), target, stream);
  }

  // repeated double axis_lengths = 2;
  if (this->_internal_axis_lengths_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_axis_lengths(), target);
  }

  // double rotation_angle = 3;
  if (!(this->rotation_angle() <= 0 && this->rotation_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotation_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:state_representation.proto.Ellipsoid)
  return target;
}

size_t Ellipsoid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:state_representation.proto.Ellipsoid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double axis_lengths = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_axis_lengths_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // .state_representation.proto.Shape shape = 1;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // double rotation_angle = 3;
  if (!(this->rotation_angle() <= 0 && this->rotation_angle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ellipsoid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:state_representation.proto.Ellipsoid)
  GOOGLE_DCHECK_NE(&from, this);
  const Ellipsoid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ellipsoid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:state_representation.proto.Ellipsoid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:state_representation.proto.Ellipsoid)
    MergeFrom(*source);
  }
}

void Ellipsoid::MergeFrom(const Ellipsoid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:state_representation.proto.Ellipsoid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axis_lengths_.MergeFrom(from.axis_lengths_);
  if (from.has_shape()) {
    _internal_mutable_shape()->::state_representation::proto::Shape::MergeFrom(from._internal_shape());
  }
  if (!(from.rotation_angle() <= 0 && from.rotation_angle() >= 0)) {
    _internal_set_rotation_angle(from._internal_rotation_angle());
  }
}

void Ellipsoid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:state_representation.proto.Ellipsoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ellipsoid::CopyFrom(const Ellipsoid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:state_representation.proto.Ellipsoid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ellipsoid::IsInitialized() const {
  return true;
}

void Ellipsoid::InternalSwap(Ellipsoid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  axis_lengths_.InternalSwap(&other->axis_lengths_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ellipsoid, rotation_angle_)
      + sizeof(Ellipsoid::rotation_angle_)
      - PROTOBUF_FIELD_OFFSET(Ellipsoid, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ellipsoid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_getter, &descriptor_table_state_5frepresentation_2fgeometry_2fellipsoid_2eproto_once,
      file_level_metadata_state_5frepresentation_2fgeometry_2fellipsoid_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::state_representation::proto::Ellipsoid* Arena::CreateMaybeMessage< ::state_representation::proto::Ellipsoid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::state_representation::proto::Ellipsoid >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
