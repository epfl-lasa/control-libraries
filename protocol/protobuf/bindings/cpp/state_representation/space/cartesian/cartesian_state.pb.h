// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/space/cartesian/cartesian_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state_representation/space/spatial_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
namespace state_representation {
namespace proto {
class CartesianPose;
struct CartesianPoseDefaultTypeInternal;
extern CartesianPoseDefaultTypeInternal _CartesianPose_default_instance_;
class CartesianState;
struct CartesianStateDefaultTypeInternal;
extern CartesianStateDefaultTypeInternal _CartesianState_default_instance_;
class CartesianTwist;
struct CartesianTwistDefaultTypeInternal;
extern CartesianTwistDefaultTypeInternal _CartesianTwist_default_instance_;
class CartesianWrench;
struct CartesianWrenchDefaultTypeInternal;
extern CartesianWrenchDefaultTypeInternal _CartesianWrench_default_instance_;
class Quaterniond;
struct QuaterniondDefaultTypeInternal;
extern QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
class Vector3d;
struct Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> ::state_representation::proto::CartesianPose* Arena::CreateMaybeMessage<::state_representation::proto::CartesianPose>(Arena*);
template<> ::state_representation::proto::CartesianState* Arena::CreateMaybeMessage<::state_representation::proto::CartesianState>(Arena*);
template<> ::state_representation::proto::CartesianTwist* Arena::CreateMaybeMessage<::state_representation::proto::CartesianTwist>(Arena*);
template<> ::state_representation::proto::CartesianWrench* Arena::CreateMaybeMessage<::state_representation::proto::CartesianWrench>(Arena*);
template<> ::state_representation::proto::Quaterniond* Arena::CreateMaybeMessage<::state_representation::proto::Quaterniond>(Arena*);
template<> ::state_representation::proto::Vector3d* Arena::CreateMaybeMessage<::state_representation::proto::Vector3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace state_representation {
namespace proto {

// ===================================================================

class Vector3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {}
  ~Vector3d() override;
  explicit constexpr Vector3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const final {
    return new Vector3d();
  }

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:state_representation.proto.Vector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
};
// -------------------------------------------------------------------

class Quaterniond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.Quaterniond) */ {
 public:
  inline Quaterniond() : Quaterniond(nullptr) {}
  ~Quaterniond() override;
  explicit constexpr Quaterniond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaterniond(const Quaterniond& from);
  Quaterniond(Quaterniond&& from) noexcept
    : Quaterniond() {
    *this = ::std::move(from);
  }

  inline Quaterniond& operator=(const Quaterniond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaterniond& operator=(Quaterniond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaterniond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaterniond* internal_default_instance() {
    return reinterpret_cast<const Quaterniond*>(
               &_Quaterniond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Quaterniond& a, Quaterniond& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaterniond* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaterniond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaterniond* New() const final {
    return new Quaterniond();
  }

  Quaterniond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaterniond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaterniond& from);
  void MergeFrom(const Quaterniond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaterniond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.Quaterniond";
  }
  protected:
  explicit Quaterniond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 2,
    kWFieldNumber = 1,
  };
  // .state_representation.proto.Vector3d vec = 2;
  bool has_vec() const;
  private:
  bool _internal_has_vec() const;
  public:
  void clear_vec();
  const ::state_representation::proto::Vector3d& vec() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_vec();
  ::state_representation::proto::Vector3d* mutable_vec();
  void set_allocated_vec(::state_representation::proto::Vector3d* vec);
  private:
  const ::state_representation::proto::Vector3d& _internal_vec() const;
  ::state_representation::proto::Vector3d* _internal_mutable_vec();
  public:
  void unsafe_arena_set_allocated_vec(
      ::state_representation::proto::Vector3d* vec);
  ::state_representation::proto::Vector3d* unsafe_arena_release_vec();

  // double w = 1;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:state_representation.proto.Quaterniond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::state_representation::proto::Vector3d* vec_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
};
// -------------------------------------------------------------------

class CartesianState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.CartesianState) */ {
 public:
  inline CartesianState() : CartesianState(nullptr) {}
  ~CartesianState() override;
  explicit constexpr CartesianState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartesianState(const CartesianState& from);
  CartesianState(CartesianState&& from) noexcept
    : CartesianState() {
    *this = ::std::move(from);
  }

  inline CartesianState& operator=(const CartesianState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianState& operator=(CartesianState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartesianState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartesianState* internal_default_instance() {
    return reinterpret_cast<const CartesianState*>(
               &_CartesianState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CartesianState& a, CartesianState& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianState* New() const final {
    return new CartesianState();
  }

  CartesianState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianState& from);
  void MergeFrom(const CartesianState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.CartesianState";
  }
  protected:
  explicit CartesianState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialStateFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kLinearVelocityFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kLinearAccelerationFieldNumber = 6,
    kAngularAccelerationFieldNumber = 7,
    kForceFieldNumber = 8,
    kTorqueFieldNumber = 9,
  };
  // .state_representation.proto.SpatialState spatial_state = 1;
  bool has_spatial_state() const;
  private:
  bool _internal_has_spatial_state() const;
  public:
  void clear_spatial_state();
  const ::state_representation::proto::SpatialState& spatial_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::SpatialState* release_spatial_state();
  ::state_representation::proto::SpatialState* mutable_spatial_state();
  void set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state);
  private:
  const ::state_representation::proto::SpatialState& _internal_spatial_state() const;
  ::state_representation::proto::SpatialState* _internal_mutable_spatial_state();
  public:
  void unsafe_arena_set_allocated_spatial_state(
      ::state_representation::proto::SpatialState* spatial_state);
  ::state_representation::proto::SpatialState* unsafe_arena_release_spatial_state();

  // .state_representation.proto.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::state_representation::proto::Vector3d& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_position();
  ::state_representation::proto::Vector3d* mutable_position();
  void set_allocated_position(::state_representation::proto::Vector3d* position);
  private:
  const ::state_representation::proto::Vector3d& _internal_position() const;
  ::state_representation::proto::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::state_representation::proto::Vector3d* position);
  ::state_representation::proto::Vector3d* unsafe_arena_release_position();

  // .state_representation.proto.Quaterniond orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::state_representation::proto::Quaterniond& orientation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Quaterniond* release_orientation();
  ::state_representation::proto::Quaterniond* mutable_orientation();
  void set_allocated_orientation(::state_representation::proto::Quaterniond* orientation);
  private:
  const ::state_representation::proto::Quaterniond& _internal_orientation() const;
  ::state_representation::proto::Quaterniond* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::state_representation::proto::Quaterniond* orientation);
  ::state_representation::proto::Quaterniond* unsafe_arena_release_orientation();

  // .state_representation.proto.Vector3d linear_velocity = 4;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::state_representation::proto::Vector3d& linear_velocity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_linear_velocity();
  ::state_representation::proto::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::state_representation::proto::Vector3d* linear_velocity);
  private:
  const ::state_representation::proto::Vector3d& _internal_linear_velocity() const;
  ::state_representation::proto::Vector3d* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::state_representation::proto::Vector3d* linear_velocity);
  ::state_representation::proto::Vector3d* unsafe_arena_release_linear_velocity();

  // .state_representation.proto.Vector3d angular_velocity = 5;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::state_representation::proto::Vector3d& angular_velocity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_angular_velocity();
  ::state_representation::proto::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::state_representation::proto::Vector3d* angular_velocity);
  private:
  const ::state_representation::proto::Vector3d& _internal_angular_velocity() const;
  ::state_representation::proto::Vector3d* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::state_representation::proto::Vector3d* angular_velocity);
  ::state_representation::proto::Vector3d* unsafe_arena_release_angular_velocity();

  // .state_representation.proto.Vector3d linear_acceleration = 6;
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::state_representation::proto::Vector3d& linear_acceleration() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_linear_acceleration();
  ::state_representation::proto::Vector3d* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::state_representation::proto::Vector3d* linear_acceleration);
  private:
  const ::state_representation::proto::Vector3d& _internal_linear_acceleration() const;
  ::state_representation::proto::Vector3d* _internal_mutable_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_linear_acceleration(
      ::state_representation::proto::Vector3d* linear_acceleration);
  ::state_representation::proto::Vector3d* unsafe_arena_release_linear_acceleration();

  // .state_representation.proto.Vector3d angular_acceleration = 7;
  bool has_angular_acceleration() const;
  private:
  bool _internal_has_angular_acceleration() const;
  public:
  void clear_angular_acceleration();
  const ::state_representation::proto::Vector3d& angular_acceleration() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_angular_acceleration();
  ::state_representation::proto::Vector3d* mutable_angular_acceleration();
  void set_allocated_angular_acceleration(::state_representation::proto::Vector3d* angular_acceleration);
  private:
  const ::state_representation::proto::Vector3d& _internal_angular_acceleration() const;
  ::state_representation::proto::Vector3d* _internal_mutable_angular_acceleration();
  public:
  void unsafe_arena_set_allocated_angular_acceleration(
      ::state_representation::proto::Vector3d* angular_acceleration);
  ::state_representation::proto::Vector3d* unsafe_arena_release_angular_acceleration();

  // .state_representation.proto.Vector3d force = 8;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::state_representation::proto::Vector3d& force() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_force();
  ::state_representation::proto::Vector3d* mutable_force();
  void set_allocated_force(::state_representation::proto::Vector3d* force);
  private:
  const ::state_representation::proto::Vector3d& _internal_force() const;
  ::state_representation::proto::Vector3d* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::state_representation::proto::Vector3d* force);
  ::state_representation::proto::Vector3d* unsafe_arena_release_force();

  // .state_representation.proto.Vector3d torque = 9;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  const ::state_representation::proto::Vector3d& torque() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_torque();
  ::state_representation::proto::Vector3d* mutable_torque();
  void set_allocated_torque(::state_representation::proto::Vector3d* torque);
  private:
  const ::state_representation::proto::Vector3d& _internal_torque() const;
  ::state_representation::proto::Vector3d* _internal_mutable_torque();
  public:
  void unsafe_arena_set_allocated_torque(
      ::state_representation::proto::Vector3d* torque);
  ::state_representation::proto::Vector3d* unsafe_arena_release_torque();

  // @@protoc_insertion_point(class_scope:state_representation.proto.CartesianState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::state_representation::proto::SpatialState* spatial_state_;
  ::state_representation::proto::Vector3d* position_;
  ::state_representation::proto::Quaterniond* orientation_;
  ::state_representation::proto::Vector3d* linear_velocity_;
  ::state_representation::proto::Vector3d* angular_velocity_;
  ::state_representation::proto::Vector3d* linear_acceleration_;
  ::state_representation::proto::Vector3d* angular_acceleration_;
  ::state_representation::proto::Vector3d* force_;
  ::state_representation::proto::Vector3d* torque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
};
// -------------------------------------------------------------------

class CartesianPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.CartesianPose) */ {
 public:
  inline CartesianPose() : CartesianPose(nullptr) {}
  ~CartesianPose() override;
  explicit constexpr CartesianPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartesianPose(const CartesianPose& from);
  CartesianPose(CartesianPose&& from) noexcept
    : CartesianPose() {
    *this = ::std::move(from);
  }

  inline CartesianPose& operator=(const CartesianPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianPose& operator=(CartesianPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartesianPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartesianPose* internal_default_instance() {
    return reinterpret_cast<const CartesianPose*>(
               &_CartesianPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CartesianPose& a, CartesianPose& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianPose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianPose* New() const final {
    return new CartesianPose();
  }

  CartesianPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianPose& from);
  void MergeFrom(const CartesianPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.CartesianPose";
  }
  protected:
  explicit CartesianPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialStateFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // .state_representation.proto.SpatialState spatial_state = 1;
  bool has_spatial_state() const;
  private:
  bool _internal_has_spatial_state() const;
  public:
  void clear_spatial_state();
  const ::state_representation::proto::SpatialState& spatial_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::SpatialState* release_spatial_state();
  ::state_representation::proto::SpatialState* mutable_spatial_state();
  void set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state);
  private:
  const ::state_representation::proto::SpatialState& _internal_spatial_state() const;
  ::state_representation::proto::SpatialState* _internal_mutable_spatial_state();
  public:
  void unsafe_arena_set_allocated_spatial_state(
      ::state_representation::proto::SpatialState* spatial_state);
  ::state_representation::proto::SpatialState* unsafe_arena_release_spatial_state();

  // .state_representation.proto.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::state_representation::proto::Vector3d& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_position();
  ::state_representation::proto::Vector3d* mutable_position();
  void set_allocated_position(::state_representation::proto::Vector3d* position);
  private:
  const ::state_representation::proto::Vector3d& _internal_position() const;
  ::state_representation::proto::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::state_representation::proto::Vector3d* position);
  ::state_representation::proto::Vector3d* unsafe_arena_release_position();

  // .state_representation.proto.Quaterniond orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::state_representation::proto::Quaterniond& orientation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Quaterniond* release_orientation();
  ::state_representation::proto::Quaterniond* mutable_orientation();
  void set_allocated_orientation(::state_representation::proto::Quaterniond* orientation);
  private:
  const ::state_representation::proto::Quaterniond& _internal_orientation() const;
  ::state_representation::proto::Quaterniond* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::state_representation::proto::Quaterniond* orientation);
  ::state_representation::proto::Quaterniond* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:state_representation.proto.CartesianPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::state_representation::proto::SpatialState* spatial_state_;
  ::state_representation::proto::Vector3d* position_;
  ::state_representation::proto::Quaterniond* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
};
// -------------------------------------------------------------------

class CartesianTwist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.CartesianTwist) */ {
 public:
  inline CartesianTwist() : CartesianTwist(nullptr) {}
  ~CartesianTwist() override;
  explicit constexpr CartesianTwist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartesianTwist(const CartesianTwist& from);
  CartesianTwist(CartesianTwist&& from) noexcept
    : CartesianTwist() {
    *this = ::std::move(from);
  }

  inline CartesianTwist& operator=(const CartesianTwist& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianTwist& operator=(CartesianTwist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartesianTwist& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartesianTwist* internal_default_instance() {
    return reinterpret_cast<const CartesianTwist*>(
               &_CartesianTwist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CartesianTwist& a, CartesianTwist& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianTwist* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianTwist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianTwist* New() const final {
    return new CartesianTwist();
  }

  CartesianTwist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianTwist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianTwist& from);
  void MergeFrom(const CartesianTwist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianTwist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.CartesianTwist";
  }
  protected:
  explicit CartesianTwist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialStateFieldNumber = 1,
    kLinearVelocityFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
  };
  // .state_representation.proto.SpatialState spatial_state = 1;
  bool has_spatial_state() const;
  private:
  bool _internal_has_spatial_state() const;
  public:
  void clear_spatial_state();
  const ::state_representation::proto::SpatialState& spatial_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::SpatialState* release_spatial_state();
  ::state_representation::proto::SpatialState* mutable_spatial_state();
  void set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state);
  private:
  const ::state_representation::proto::SpatialState& _internal_spatial_state() const;
  ::state_representation::proto::SpatialState* _internal_mutable_spatial_state();
  public:
  void unsafe_arena_set_allocated_spatial_state(
      ::state_representation::proto::SpatialState* spatial_state);
  ::state_representation::proto::SpatialState* unsafe_arena_release_spatial_state();

  // .state_representation.proto.Vector3d linear_velocity = 4;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::state_representation::proto::Vector3d& linear_velocity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_linear_velocity();
  ::state_representation::proto::Vector3d* mutable_linear_velocity();
  void set_allocated_linear_velocity(::state_representation::proto::Vector3d* linear_velocity);
  private:
  const ::state_representation::proto::Vector3d& _internal_linear_velocity() const;
  ::state_representation::proto::Vector3d* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::state_representation::proto::Vector3d* linear_velocity);
  ::state_representation::proto::Vector3d* unsafe_arena_release_linear_velocity();

  // .state_representation.proto.Vector3d angular_velocity = 5;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::state_representation::proto::Vector3d& angular_velocity() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_angular_velocity();
  ::state_representation::proto::Vector3d* mutable_angular_velocity();
  void set_allocated_angular_velocity(::state_representation::proto::Vector3d* angular_velocity);
  private:
  const ::state_representation::proto::Vector3d& _internal_angular_velocity() const;
  ::state_representation::proto::Vector3d* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::state_representation::proto::Vector3d* angular_velocity);
  ::state_representation::proto::Vector3d* unsafe_arena_release_angular_velocity();

  // @@protoc_insertion_point(class_scope:state_representation.proto.CartesianTwist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::state_representation::proto::SpatialState* spatial_state_;
  ::state_representation::proto::Vector3d* linear_velocity_;
  ::state_representation::proto::Vector3d* angular_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
};
// -------------------------------------------------------------------

class CartesianWrench final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.CartesianWrench) */ {
 public:
  inline CartesianWrench() : CartesianWrench(nullptr) {}
  ~CartesianWrench() override;
  explicit constexpr CartesianWrench(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartesianWrench(const CartesianWrench& from);
  CartesianWrench(CartesianWrench&& from) noexcept
    : CartesianWrench() {
    *this = ::std::move(from);
  }

  inline CartesianWrench& operator=(const CartesianWrench& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianWrench& operator=(CartesianWrench&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartesianWrench& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartesianWrench* internal_default_instance() {
    return reinterpret_cast<const CartesianWrench*>(
               &_CartesianWrench_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CartesianWrench& a, CartesianWrench& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianWrench* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianWrench* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartesianWrench* New() const final {
    return new CartesianWrench();
  }

  CartesianWrench* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartesianWrench>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartesianWrench& from);
  void MergeFrom(const CartesianWrench& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianWrench* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.CartesianWrench";
  }
  protected:
  explicit CartesianWrench(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpatialStateFieldNumber = 1,
    kForceFieldNumber = 8,
    kTorqueFieldNumber = 9,
  };
  // .state_representation.proto.SpatialState spatial_state = 1;
  bool has_spatial_state() const;
  private:
  bool _internal_has_spatial_state() const;
  public:
  void clear_spatial_state();
  const ::state_representation::proto::SpatialState& spatial_state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::SpatialState* release_spatial_state();
  ::state_representation::proto::SpatialState* mutable_spatial_state();
  void set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state);
  private:
  const ::state_representation::proto::SpatialState& _internal_spatial_state() const;
  ::state_representation::proto::SpatialState* _internal_mutable_spatial_state();
  public:
  void unsafe_arena_set_allocated_spatial_state(
      ::state_representation::proto::SpatialState* spatial_state);
  ::state_representation::proto::SpatialState* unsafe_arena_release_spatial_state();

  // .state_representation.proto.Vector3d force = 8;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::state_representation::proto::Vector3d& force() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_force();
  ::state_representation::proto::Vector3d* mutable_force();
  void set_allocated_force(::state_representation::proto::Vector3d* force);
  private:
  const ::state_representation::proto::Vector3d& _internal_force() const;
  ::state_representation::proto::Vector3d* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::state_representation::proto::Vector3d* force);
  ::state_representation::proto::Vector3d* unsafe_arena_release_force();

  // .state_representation.proto.Vector3d torque = 9;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  const ::state_representation::proto::Vector3d& torque() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::Vector3d* release_torque();
  ::state_representation::proto::Vector3d* mutable_torque();
  void set_allocated_torque(::state_representation::proto::Vector3d* torque);
  private:
  const ::state_representation::proto::Vector3d& _internal_torque() const;
  ::state_representation::proto::Vector3d* _internal_mutable_torque();
  public:
  void unsafe_arena_set_allocated_torque(
      ::state_representation::proto::Vector3d* torque);
  ::state_representation::proto::Vector3d* unsafe_arena_release_torque();

  // @@protoc_insertion_point(class_scope:state_representation.proto.CartesianWrench)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::state_representation::proto::SpatialState* spatial_state_;
  ::state_representation::proto::Vector3d* force_;
  ::state_representation::proto::Vector3d* torque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::_internal_x() const {
  return x_;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Vector3d.x)
  return _internal_x();
}
inline void Vector3d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::_internal_y() const {
  return y_;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Vector3d.y)
  return _internal_y();
}
inline void Vector3d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::_internal_z() const {
  return z_;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Vector3d.z)
  return _internal_z();
}
inline void Vector3d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.Vector3d.z)
}

// -------------------------------------------------------------------

// Quaterniond

// double w = 1;
inline void Quaterniond::clear_w() {
  w_ = 0;
}
inline double Quaterniond::_internal_w() const {
  return w_;
}
inline double Quaterniond::w() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Quaterniond.w)
  return _internal_w();
}
inline void Quaterniond::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaterniond::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.Quaterniond.w)
}

// .state_representation.proto.Vector3d vec = 2;
inline bool Quaterniond::_internal_has_vec() const {
  return this != internal_default_instance() && vec_ != nullptr;
}
inline bool Quaterniond::has_vec() const {
  return _internal_has_vec();
}
inline void Quaterniond::clear_vec() {
  if (GetArenaForAllocation() == nullptr && vec_ != nullptr) {
    delete vec_;
  }
  vec_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& Quaterniond::_internal_vec() const {
  const ::state_representation::proto::Vector3d* p = vec_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& Quaterniond::vec() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Quaterniond.vec)
  return _internal_vec();
}
inline void Quaterniond::unsafe_arena_set_allocated_vec(
    ::state_representation::proto::Vector3d* vec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_);
  }
  vec_ = vec;
  if (vec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.Quaterniond.vec)
}
inline ::state_representation::proto::Vector3d* Quaterniond::release_vec() {
  
  ::state_representation::proto::Vector3d* temp = vec_;
  vec_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* Quaterniond::unsafe_arena_release_vec() {
  // @@protoc_insertion_point(field_release:state_representation.proto.Quaterniond.vec)
  
  ::state_representation::proto::Vector3d* temp = vec_;
  vec_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* Quaterniond::_internal_mutable_vec() {
  
  if (vec_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    vec_ = p;
  }
  return vec_;
}
inline ::state_representation::proto::Vector3d* Quaterniond::mutable_vec() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.Quaterniond.vec)
  return _internal_mutable_vec();
}
inline void Quaterniond::set_allocated_vec(::state_representation::proto::Vector3d* vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete vec_;
  }
  if (vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(vec);
    if (message_arena != submessage_arena) {
      vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec, submessage_arena);
    }
    
  } else {
    
  }
  vec_ = vec;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.Quaterniond.vec)
}

// -------------------------------------------------------------------

// CartesianState

// .state_representation.proto.SpatialState spatial_state = 1;
inline bool CartesianState::_internal_has_spatial_state() const {
  return this != internal_default_instance() && spatial_state_ != nullptr;
}
inline bool CartesianState::has_spatial_state() const {
  return _internal_has_spatial_state();
}
inline const ::state_representation::proto::SpatialState& CartesianState::_internal_spatial_state() const {
  const ::state_representation::proto::SpatialState* p = spatial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::SpatialState&>(
      ::state_representation::proto::_SpatialState_default_instance_);
}
inline const ::state_representation::proto::SpatialState& CartesianState::spatial_state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.spatial_state)
  return _internal_spatial_state();
}
inline void CartesianState::unsafe_arena_set_allocated_spatial_state(
    ::state_representation::proto::SpatialState* spatial_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  spatial_state_ = spatial_state;
  if (spatial_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.spatial_state)
}
inline ::state_representation::proto::SpatialState* CartesianState::release_spatial_state() {
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianState::unsafe_arena_release_spatial_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.spatial_state)
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianState::_internal_mutable_spatial_state() {
  
  if (spatial_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::SpatialState>(GetArenaForAllocation());
    spatial_state_ = p;
  }
  return spatial_state_;
}
inline ::state_representation::proto::SpatialState* CartesianState::mutable_spatial_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.spatial_state)
  return _internal_mutable_spatial_state();
}
inline void CartesianState::set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  if (spatial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state));
    if (message_arena != submessage_arena) {
      spatial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_state, submessage_arena);
    }
    
  } else {
    
  }
  spatial_state_ = spatial_state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.spatial_state)
}

// .state_representation.proto.Vector3d position = 2;
inline bool CartesianState::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CartesianState::has_position() const {
  return _internal_has_position();
}
inline void CartesianState::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_position() const {
  const ::state_representation::proto::Vector3d* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::position() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.position)
  return _internal_position();
}
inline void CartesianState::unsafe_arena_set_allocated_position(
    ::state_representation::proto::Vector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.position)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_position() {
  
  ::state_representation::proto::Vector3d* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.position)
  
  ::state_representation::proto::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_position() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.position)
  return _internal_mutable_position();
}
inline void CartesianState::set_allocated_position(::state_representation::proto::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.position)
}

// .state_representation.proto.Quaterniond orientation = 3;
inline bool CartesianState::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool CartesianState::has_orientation() const {
  return _internal_has_orientation();
}
inline void CartesianState::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::state_representation::proto::Quaterniond& CartesianState::_internal_orientation() const {
  const ::state_representation::proto::Quaterniond* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Quaterniond&>(
      ::state_representation::proto::_Quaterniond_default_instance_);
}
inline const ::state_representation::proto::Quaterniond& CartesianState::orientation() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.orientation)
  return _internal_orientation();
}
inline void CartesianState::unsafe_arena_set_allocated_orientation(
    ::state_representation::proto::Quaterniond* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.orientation)
}
inline ::state_representation::proto::Quaterniond* CartesianState::release_orientation() {
  
  ::state_representation::proto::Quaterniond* temp = orientation_;
  orientation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Quaterniond* CartesianState::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.orientation)
  
  ::state_representation::proto::Quaterniond* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Quaterniond* CartesianState::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Quaterniond>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::state_representation::proto::Quaterniond* CartesianState::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.orientation)
  return _internal_mutable_orientation();
}
inline void CartesianState::set_allocated_orientation(::state_representation::proto::Quaterniond* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Quaterniond>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.orientation)
}

// .state_representation.proto.Vector3d linear_velocity = 4;
inline bool CartesianState::_internal_has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != nullptr;
}
inline bool CartesianState::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline void CartesianState::clear_linear_velocity() {
  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_linear_velocity() const {
  const ::state_representation::proto::Vector3d* p = linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::linear_velocity() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.linear_velocity)
  return _internal_linear_velocity();
}
inline void CartesianState::unsafe_arena_set_allocated_linear_velocity(
    ::state_representation::proto::Vector3d* linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.linear_velocity)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_linear_velocity() {
  
  ::state_representation::proto::Vector3d* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.linear_velocity)
  
  ::state_representation::proto::Vector3d* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_linear_velocity() {
  
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void CartesianState::set_allocated_linear_velocity(::state_representation::proto::Vector3d* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linear_velocity_;
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(linear_velocity);
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.linear_velocity)
}

// .state_representation.proto.Vector3d angular_velocity = 5;
inline bool CartesianState::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool CartesianState::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void CartesianState::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_angular_velocity() const {
  const ::state_representation::proto::Vector3d* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.angular_velocity)
  return _internal_angular_velocity();
}
inline void CartesianState::unsafe_arena_set_allocated_angular_velocity(
    ::state_representation::proto::Vector3d* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.angular_velocity)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_angular_velocity() {
  
  ::state_representation::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.angular_velocity)
  
  ::state_representation::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void CartesianState::set_allocated_angular_velocity(::state_representation::proto::Vector3d* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.angular_velocity)
}

// .state_representation.proto.Vector3d linear_acceleration = 6;
inline bool CartesianState::_internal_has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != nullptr;
}
inline bool CartesianState::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline void CartesianState::clear_linear_acceleration() {
  if (GetArenaForAllocation() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_linear_acceleration() const {
  const ::state_representation::proto::Vector3d* p = linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void CartesianState::unsafe_arena_set_allocated_linear_acceleration(
    ::state_representation::proto::Vector3d* linear_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.linear_acceleration)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_linear_acceleration() {
  
  ::state_representation::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.linear_acceleration)
  
  ::state_representation::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_linear_acceleration() {
  
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_linear_acceleration() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.linear_acceleration)
  return _internal_mutable_linear_acceleration();
}
inline void CartesianState::set_allocated_linear_acceleration(::state_representation::proto::Vector3d* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linear_acceleration_;
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(linear_acceleration);
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.linear_acceleration)
}

// .state_representation.proto.Vector3d angular_acceleration = 7;
inline bool CartesianState::_internal_has_angular_acceleration() const {
  return this != internal_default_instance() && angular_acceleration_ != nullptr;
}
inline bool CartesianState::has_angular_acceleration() const {
  return _internal_has_angular_acceleration();
}
inline void CartesianState::clear_angular_acceleration() {
  if (GetArenaForAllocation() == nullptr && angular_acceleration_ != nullptr) {
    delete angular_acceleration_;
  }
  angular_acceleration_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_angular_acceleration() const {
  const ::state_representation::proto::Vector3d* p = angular_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::angular_acceleration() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.angular_acceleration)
  return _internal_angular_acceleration();
}
inline void CartesianState::unsafe_arena_set_allocated_angular_acceleration(
    ::state_representation::proto::Vector3d* angular_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_acceleration_);
  }
  angular_acceleration_ = angular_acceleration;
  if (angular_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.angular_acceleration)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_angular_acceleration() {
  
  ::state_representation::proto::Vector3d* temp = angular_acceleration_;
  angular_acceleration_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_angular_acceleration() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.angular_acceleration)
  
  ::state_representation::proto::Vector3d* temp = angular_acceleration_;
  angular_acceleration_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_angular_acceleration() {
  
  if (angular_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    angular_acceleration_ = p;
  }
  return angular_acceleration_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_angular_acceleration() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.angular_acceleration)
  return _internal_mutable_angular_acceleration();
}
inline void CartesianState::set_allocated_angular_acceleration(::state_representation::proto::Vector3d* angular_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_acceleration_;
  }
  if (angular_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(angular_acceleration);
    if (message_arena != submessage_arena) {
      angular_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  angular_acceleration_ = angular_acceleration;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.angular_acceleration)
}

// .state_representation.proto.Vector3d force = 8;
inline bool CartesianState::_internal_has_force() const {
  return this != internal_default_instance() && force_ != nullptr;
}
inline bool CartesianState::has_force() const {
  return _internal_has_force();
}
inline void CartesianState::clear_force() {
  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_force() const {
  const ::state_representation::proto::Vector3d* p = force_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::force() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.force)
  return _internal_force();
}
inline void CartesianState::unsafe_arena_set_allocated_force(
    ::state_representation::proto::Vector3d* force) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.force)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_force() {
  
  ::state_representation::proto::Vector3d* temp = force_;
  force_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.force)
  
  ::state_representation::proto::Vector3d* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_force() {
  
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    force_ = p;
  }
  return force_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_force() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.force)
  return _internal_mutable_force();
}
inline void CartesianState::set_allocated_force(::state_representation::proto::Vector3d* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete force_;
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(force);
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.force)
}

// .state_representation.proto.Vector3d torque = 9;
inline bool CartesianState::_internal_has_torque() const {
  return this != internal_default_instance() && torque_ != nullptr;
}
inline bool CartesianState::has_torque() const {
  return _internal_has_torque();
}
inline void CartesianState::clear_torque() {
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianState::_internal_torque() const {
  const ::state_representation::proto::Vector3d* p = torque_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianState::torque() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianState.torque)
  return _internal_torque();
}
inline void CartesianState::unsafe_arena_set_allocated_torque(
    ::state_representation::proto::Vector3d* torque) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torque_);
  }
  torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianState.torque)
}
inline ::state_representation::proto::Vector3d* CartesianState::release_torque() {
  
  ::state_representation::proto::Vector3d* temp = torque_;
  torque_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::unsafe_arena_release_torque() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianState.torque)
  
  ::state_representation::proto::Vector3d* temp = torque_;
  torque_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianState::_internal_mutable_torque() {
  
  if (torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    torque_ = p;
  }
  return torque_;
}
inline ::state_representation::proto::Vector3d* CartesianState::mutable_torque() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianState.torque)
  return _internal_mutable_torque();
}
inline void CartesianState::set_allocated_torque(::state_representation::proto::Vector3d* torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete torque_;
  }
  if (torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(torque);
    if (message_arena != submessage_arena) {
      torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torque, submessage_arena);
    }
    
  } else {
    
  }
  torque_ = torque;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianState.torque)
}

// -------------------------------------------------------------------

// CartesianPose

// .state_representation.proto.SpatialState spatial_state = 1;
inline bool CartesianPose::_internal_has_spatial_state() const {
  return this != internal_default_instance() && spatial_state_ != nullptr;
}
inline bool CartesianPose::has_spatial_state() const {
  return _internal_has_spatial_state();
}
inline const ::state_representation::proto::SpatialState& CartesianPose::_internal_spatial_state() const {
  const ::state_representation::proto::SpatialState* p = spatial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::SpatialState&>(
      ::state_representation::proto::_SpatialState_default_instance_);
}
inline const ::state_representation::proto::SpatialState& CartesianPose::spatial_state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianPose.spatial_state)
  return _internal_spatial_state();
}
inline void CartesianPose::unsafe_arena_set_allocated_spatial_state(
    ::state_representation::proto::SpatialState* spatial_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  spatial_state_ = spatial_state;
  if (spatial_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianPose.spatial_state)
}
inline ::state_representation::proto::SpatialState* CartesianPose::release_spatial_state() {
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianPose::unsafe_arena_release_spatial_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianPose.spatial_state)
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianPose::_internal_mutable_spatial_state() {
  
  if (spatial_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::SpatialState>(GetArenaForAllocation());
    spatial_state_ = p;
  }
  return spatial_state_;
}
inline ::state_representation::proto::SpatialState* CartesianPose::mutable_spatial_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianPose.spatial_state)
  return _internal_mutable_spatial_state();
}
inline void CartesianPose::set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  if (spatial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state));
    if (message_arena != submessage_arena) {
      spatial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_state, submessage_arena);
    }
    
  } else {
    
  }
  spatial_state_ = spatial_state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianPose.spatial_state)
}

// .state_representation.proto.Vector3d position = 2;
inline bool CartesianPose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CartesianPose::has_position() const {
  return _internal_has_position();
}
inline void CartesianPose::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianPose::_internal_position() const {
  const ::state_representation::proto::Vector3d* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianPose::position() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianPose.position)
  return _internal_position();
}
inline void CartesianPose::unsafe_arena_set_allocated_position(
    ::state_representation::proto::Vector3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianPose.position)
}
inline ::state_representation::proto::Vector3d* CartesianPose::release_position() {
  
  ::state_representation::proto::Vector3d* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianPose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianPose.position)
  
  ::state_representation::proto::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianPose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::state_representation::proto::Vector3d* CartesianPose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianPose.position)
  return _internal_mutable_position();
}
inline void CartesianPose::set_allocated_position(::state_representation::proto::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianPose.position)
}

// .state_representation.proto.Quaterniond orientation = 3;
inline bool CartesianPose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool CartesianPose::has_orientation() const {
  return _internal_has_orientation();
}
inline void CartesianPose::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::state_representation::proto::Quaterniond& CartesianPose::_internal_orientation() const {
  const ::state_representation::proto::Quaterniond* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Quaterniond&>(
      ::state_representation::proto::_Quaterniond_default_instance_);
}
inline const ::state_representation::proto::Quaterniond& CartesianPose::orientation() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianPose.orientation)
  return _internal_orientation();
}
inline void CartesianPose::unsafe_arena_set_allocated_orientation(
    ::state_representation::proto::Quaterniond* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianPose.orientation)
}
inline ::state_representation::proto::Quaterniond* CartesianPose::release_orientation() {
  
  ::state_representation::proto::Quaterniond* temp = orientation_;
  orientation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Quaterniond* CartesianPose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianPose.orientation)
  
  ::state_representation::proto::Quaterniond* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Quaterniond* CartesianPose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Quaterniond>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::state_representation::proto::Quaterniond* CartesianPose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianPose.orientation)
  return _internal_mutable_orientation();
}
inline void CartesianPose::set_allocated_orientation(::state_representation::proto::Quaterniond* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Quaterniond>::GetOwningArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianPose.orientation)
}

// -------------------------------------------------------------------

// CartesianTwist

// .state_representation.proto.SpatialState spatial_state = 1;
inline bool CartesianTwist::_internal_has_spatial_state() const {
  return this != internal_default_instance() && spatial_state_ != nullptr;
}
inline bool CartesianTwist::has_spatial_state() const {
  return _internal_has_spatial_state();
}
inline const ::state_representation::proto::SpatialState& CartesianTwist::_internal_spatial_state() const {
  const ::state_representation::proto::SpatialState* p = spatial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::SpatialState&>(
      ::state_representation::proto::_SpatialState_default_instance_);
}
inline const ::state_representation::proto::SpatialState& CartesianTwist::spatial_state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianTwist.spatial_state)
  return _internal_spatial_state();
}
inline void CartesianTwist::unsafe_arena_set_allocated_spatial_state(
    ::state_representation::proto::SpatialState* spatial_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  spatial_state_ = spatial_state;
  if (spatial_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianTwist.spatial_state)
}
inline ::state_representation::proto::SpatialState* CartesianTwist::release_spatial_state() {
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianTwist::unsafe_arena_release_spatial_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianTwist.spatial_state)
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianTwist::_internal_mutable_spatial_state() {
  
  if (spatial_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::SpatialState>(GetArenaForAllocation());
    spatial_state_ = p;
  }
  return spatial_state_;
}
inline ::state_representation::proto::SpatialState* CartesianTwist::mutable_spatial_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianTwist.spatial_state)
  return _internal_mutable_spatial_state();
}
inline void CartesianTwist::set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  if (spatial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state));
    if (message_arena != submessage_arena) {
      spatial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_state, submessage_arena);
    }
    
  } else {
    
  }
  spatial_state_ = spatial_state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianTwist.spatial_state)
}

// .state_representation.proto.Vector3d linear_velocity = 4;
inline bool CartesianTwist::_internal_has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != nullptr;
}
inline bool CartesianTwist::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline void CartesianTwist::clear_linear_velocity() {
  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianTwist::_internal_linear_velocity() const {
  const ::state_representation::proto::Vector3d* p = linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianTwist::linear_velocity() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianTwist.linear_velocity)
  return _internal_linear_velocity();
}
inline void CartesianTwist::unsafe_arena_set_allocated_linear_velocity(
    ::state_representation::proto::Vector3d* linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianTwist.linear_velocity)
}
inline ::state_representation::proto::Vector3d* CartesianTwist::release_linear_velocity() {
  
  ::state_representation::proto::Vector3d* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianTwist::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianTwist.linear_velocity)
  
  ::state_representation::proto::Vector3d* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianTwist::_internal_mutable_linear_velocity() {
  
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::state_representation::proto::Vector3d* CartesianTwist::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianTwist.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void CartesianTwist::set_allocated_linear_velocity(::state_representation::proto::Vector3d* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete linear_velocity_;
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(linear_velocity);
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianTwist.linear_velocity)
}

// .state_representation.proto.Vector3d angular_velocity = 5;
inline bool CartesianTwist::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool CartesianTwist::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void CartesianTwist::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianTwist::_internal_angular_velocity() const {
  const ::state_representation::proto::Vector3d* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianTwist::angular_velocity() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianTwist.angular_velocity)
  return _internal_angular_velocity();
}
inline void CartesianTwist::unsafe_arena_set_allocated_angular_velocity(
    ::state_representation::proto::Vector3d* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianTwist.angular_velocity)
}
inline ::state_representation::proto::Vector3d* CartesianTwist::release_angular_velocity() {
  
  ::state_representation::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianTwist::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianTwist.angular_velocity)
  
  ::state_representation::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianTwist::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::state_representation::proto::Vector3d* CartesianTwist::mutable_angular_velocity() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianTwist.angular_velocity)
  return _internal_mutable_angular_velocity();
}
inline void CartesianTwist::set_allocated_angular_velocity(::state_representation::proto::Vector3d* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianTwist.angular_velocity)
}

// -------------------------------------------------------------------

// CartesianWrench

// .state_representation.proto.SpatialState spatial_state = 1;
inline bool CartesianWrench::_internal_has_spatial_state() const {
  return this != internal_default_instance() && spatial_state_ != nullptr;
}
inline bool CartesianWrench::has_spatial_state() const {
  return _internal_has_spatial_state();
}
inline const ::state_representation::proto::SpatialState& CartesianWrench::_internal_spatial_state() const {
  const ::state_representation::proto::SpatialState* p = spatial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::SpatialState&>(
      ::state_representation::proto::_SpatialState_default_instance_);
}
inline const ::state_representation::proto::SpatialState& CartesianWrench::spatial_state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianWrench.spatial_state)
  return _internal_spatial_state();
}
inline void CartesianWrench::unsafe_arena_set_allocated_spatial_state(
    ::state_representation::proto::SpatialState* spatial_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  spatial_state_ = spatial_state;
  if (spatial_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianWrench.spatial_state)
}
inline ::state_representation::proto::SpatialState* CartesianWrench::release_spatial_state() {
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianWrench::unsafe_arena_release_spatial_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianWrench.spatial_state)
  
  ::state_representation::proto::SpatialState* temp = spatial_state_;
  spatial_state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::SpatialState* CartesianWrench::_internal_mutable_spatial_state() {
  
  if (spatial_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::SpatialState>(GetArenaForAllocation());
    spatial_state_ = p;
  }
  return spatial_state_;
}
inline ::state_representation::proto::SpatialState* CartesianWrench::mutable_spatial_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianWrench.spatial_state)
  return _internal_mutable_spatial_state();
}
inline void CartesianWrench::set_allocated_spatial_state(::state_representation::proto::SpatialState* spatial_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state_);
  }
  if (spatial_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spatial_state));
    if (message_arena != submessage_arena) {
      spatial_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spatial_state, submessage_arena);
    }
    
  } else {
    
  }
  spatial_state_ = spatial_state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianWrench.spatial_state)
}

// .state_representation.proto.Vector3d force = 8;
inline bool CartesianWrench::_internal_has_force() const {
  return this != internal_default_instance() && force_ != nullptr;
}
inline bool CartesianWrench::has_force() const {
  return _internal_has_force();
}
inline void CartesianWrench::clear_force() {
  if (GetArenaForAllocation() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianWrench::_internal_force() const {
  const ::state_representation::proto::Vector3d* p = force_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianWrench::force() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianWrench.force)
  return _internal_force();
}
inline void CartesianWrench::unsafe_arena_set_allocated_force(
    ::state_representation::proto::Vector3d* force) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianWrench.force)
}
inline ::state_representation::proto::Vector3d* CartesianWrench::release_force() {
  
  ::state_representation::proto::Vector3d* temp = force_;
  force_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianWrench::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianWrench.force)
  
  ::state_representation::proto::Vector3d* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianWrench::_internal_mutable_force() {
  
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    force_ = p;
  }
  return force_;
}
inline ::state_representation::proto::Vector3d* CartesianWrench::mutable_force() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianWrench.force)
  return _internal_mutable_force();
}
inline void CartesianWrench::set_allocated_force(::state_representation::proto::Vector3d* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete force_;
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(force);
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianWrench.force)
}

// .state_representation.proto.Vector3d torque = 9;
inline bool CartesianWrench::_internal_has_torque() const {
  return this != internal_default_instance() && torque_ != nullptr;
}
inline bool CartesianWrench::has_torque() const {
  return _internal_has_torque();
}
inline void CartesianWrench::clear_torque() {
  if (GetArenaForAllocation() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
}
inline const ::state_representation::proto::Vector3d& CartesianWrench::_internal_torque() const {
  const ::state_representation::proto::Vector3d* p = torque_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::Vector3d&>(
      ::state_representation::proto::_Vector3d_default_instance_);
}
inline const ::state_representation::proto::Vector3d& CartesianWrench::torque() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.CartesianWrench.torque)
  return _internal_torque();
}
inline void CartesianWrench::unsafe_arena_set_allocated_torque(
    ::state_representation::proto::Vector3d* torque) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torque_);
  }
  torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.CartesianWrench.torque)
}
inline ::state_representation::proto::Vector3d* CartesianWrench::release_torque() {
  
  ::state_representation::proto::Vector3d* temp = torque_;
  torque_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianWrench::unsafe_arena_release_torque() {
  // @@protoc_insertion_point(field_release:state_representation.proto.CartesianWrench.torque)
  
  ::state_representation::proto::Vector3d* temp = torque_;
  torque_ = nullptr;
  return temp;
}
inline ::state_representation::proto::Vector3d* CartesianWrench::_internal_mutable_torque() {
  
  if (torque_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::Vector3d>(GetArenaForAllocation());
    torque_ = p;
  }
  return torque_;
}
inline ::state_representation::proto::Vector3d* CartesianWrench::mutable_torque() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.CartesianWrench.torque)
  return _internal_mutable_torque();
}
inline void CartesianWrench::set_allocated_torque(::state_representation::proto::Vector3d* torque) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete torque_;
  }
  if (torque) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::state_representation::proto::Vector3d>::GetOwningArena(torque);
    if (message_arena != submessage_arena) {
      torque = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torque, submessage_arena);
    }
    
  } else {
    
  }
  torque_ = torque;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.CartesianWrench.torque)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace state_representation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fspace_2fcartesian_2fcartesian_5fstate_2eproto
