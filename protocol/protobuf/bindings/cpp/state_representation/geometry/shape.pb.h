// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/geometry/shape.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fgeometry_2fshape_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fgeometry_2fshape_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "state_representation/state.pb.h"
#include "state_representation/space/cartesian/cartesian_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5frepresentation_2fgeometry_2fshape_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5frepresentation_2fgeometry_2fshape_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fgeometry_2fshape_2eproto;
namespace state_representation {
namespace proto {
class Shape;
struct ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> ::state_representation::proto::Shape* Arena::CreateMaybeMessage<::state_representation::proto::Shape>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace state_representation {
namespace proto {

// ===================================================================

class Shape final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.Shape) */ {
 public:
  inline Shape() : Shape(nullptr) {}
  ~Shape() override;
  explicit constexpr Shape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Shape(const Shape& from);
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  inline Shape& operator=(Shape&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Shape& default_instance() {
    return *internal_default_instance();
  }
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }
  inline void Swap(Shape* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return new Shape();
  }

  Shape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.Shape";
  }
  protected:
  explicit Shape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kCenterFieldNumber = 2,
  };
  // .state_representation.proto.State state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::state_representation::proto::State& state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::State* release_state();
  ::state_representation::proto::State* mutable_state();
  void set_allocated_state(::state_representation::proto::State* state);
  private:
  const ::state_representation::proto::State& _internal_state() const;
  ::state_representation::proto::State* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::state_representation::proto::State* state);
  ::state_representation::proto::State* unsafe_arena_release_state();

  // .state_representation.proto.CartesianState center = 2;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::state_representation::proto::CartesianState& center() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::state_representation::proto::CartesianState* release_center();
  ::state_representation::proto::CartesianState* mutable_center();
  void set_allocated_center(::state_representation::proto::CartesianState* center);
  private:
  const ::state_representation::proto::CartesianState& _internal_center() const;
  ::state_representation::proto::CartesianState* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::state_representation::proto::CartesianState* center);
  ::state_representation::proto::CartesianState* unsafe_arena_release_center();

  // @@protoc_insertion_point(class_scope:state_representation.proto.Shape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::state_representation::proto::State* state_;
  ::state_representation::proto::CartesianState* center_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fgeometry_2fshape_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// .state_representation.proto.State state = 1;
inline bool Shape::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool Shape::has_state() const {
  return _internal_has_state();
}
inline const ::state_representation::proto::State& Shape::_internal_state() const {
  const ::state_representation::proto::State* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::State&>(
      ::state_representation::proto::_State_default_instance_);
}
inline const ::state_representation::proto::State& Shape::state() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Shape.state)
  return _internal_state();
}
inline void Shape::unsafe_arena_set_allocated_state(
    ::state_representation::proto::State* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.Shape.state)
}
inline ::state_representation::proto::State* Shape::release_state() {
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::State* Shape::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:state_representation.proto.Shape.state)
  
  ::state_representation::proto::State* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::state_representation::proto::State* Shape::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::State>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::state_representation::proto::State* Shape::mutable_state() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.Shape.state)
  return _internal_mutable_state();
}
inline void Shape::set_allocated_state(::state_representation::proto::State* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.Shape.state)
}

// .state_representation.proto.CartesianState center = 2;
inline bool Shape::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Shape::has_center() const {
  return _internal_has_center();
}
inline const ::state_representation::proto::CartesianState& Shape::_internal_center() const {
  const ::state_representation::proto::CartesianState* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::state_representation::proto::CartesianState&>(
      ::state_representation::proto::_CartesianState_default_instance_);
}
inline const ::state_representation::proto::CartesianState& Shape::center() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.Shape.center)
  return _internal_center();
}
inline void Shape::unsafe_arena_set_allocated_center(
    ::state_representation::proto::CartesianState* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:state_representation.proto.Shape.center)
}
inline ::state_representation::proto::CartesianState* Shape::release_center() {
  
  ::state_representation::proto::CartesianState* temp = center_;
  center_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::state_representation::proto::CartesianState* Shape::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:state_representation.proto.Shape.center)
  
  ::state_representation::proto::CartesianState* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::state_representation::proto::CartesianState* Shape::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::state_representation::proto::CartesianState>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::state_representation::proto::CartesianState* Shape::mutable_center() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.Shape.center)
  return _internal_mutable_center();
}
inline void Shape::set_allocated_center(::state_representation::proto::CartesianState* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.Shape.center)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace state_representation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fgeometry_2fshape_2eproto
