// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state_representation/state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_5frepresentation_2fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_5frepresentation_2fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_5frepresentation_2fstate_2eproto;
namespace state_representation {
namespace proto {
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace proto
}  // namespace state_representation
PROTOBUF_NAMESPACE_OPEN
template<> ::state_representation::proto::State* Arena::CreateMaybeMessage<::state_representation::proto::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace state_representation {
namespace proto {

enum StateType : int {
  STATE = 0,
  CARTESIANSTATE = 1,
  DUALQUATERNIONSTATE = 2,
  JOINTSTATE = 3,
  JACOBIANMATRIX = 4,
  TRAJECTORY = 5,
  GEOMETRY_SHAPE = 6,
  GEOMETRY_ELLIPSOID = 7,
  PARAMETER_DOUBLE = 8,
  PARAMETER_DOUBLE_ARRAY = 9,
  PARAMETER_BOOL = 10,
  PARAMETER_BOOL_ARRAY = 11,
  PARAMETER_STRING = 12,
  PARAMETER_STRING_ARRAY = 13,
  PARAMETER_CARTESIANSTATE = 14,
  PARAMETER_CARTESIANPOSE = 15,
  PARAMETER_JOINTSTATE = 16,
  PARAMETER_JOINTPOSITIONS = 17,
  PARAMETER_ELLIPSOID = 18,
  PARAMETER_MATRIX = 19,
  PARAMETER_VECTOR = 20,
  StateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StateType_IsValid(int value);
constexpr StateType StateType_MIN = STATE;
constexpr StateType StateType_MAX = PARAMETER_VECTOR;
constexpr int StateType_ARRAYSIZE = StateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StateType_descriptor();
template<typename T>
inline const std::string& StateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StateType_descriptor(), enum_t_value);
}
inline bool StateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StateType>(
    StateType_descriptor(), name, value);
}
// ===================================================================

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:state_representation.proto.State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit constexpr State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return new State();
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "state_representation.proto.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kEmptyFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .state_representation.proto.StateType type = 2;
  void clear_type();
  ::state_representation::proto::StateType type() const;
  void set_type(::state_representation::proto::StateType value);
  private:
  ::state_representation::proto::StateType _internal_type() const;
  void _internal_set_type(::state_representation::proto::StateType value);
  public:

  // bool empty = 3;
  void clear_empty();
  bool empty() const;
  void set_empty(bool value);
  private:
  bool _internal_empty() const;
  void _internal_set_empty(bool value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:state_representation.proto.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  bool empty_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_5frepresentation_2fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// State

// string name = 1;
inline void State::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& State::name() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.State.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void State::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:state_representation.proto.State.name)
}
inline std::string* State::mutable_name() {
  // @@protoc_insertion_point(field_mutable:state_representation.proto.State.name)
  return _internal_mutable_name();
}
inline const std::string& State::_internal_name() const {
  return name_.Get();
}
inline void State::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* State::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* State::release_name() {
  // @@protoc_insertion_point(field_release:state_representation.proto.State.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void State::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:state_representation.proto.State.name)
}

// .state_representation.proto.StateType type = 2;
inline void State::clear_type() {
  type_ = 0;
}
inline ::state_representation::proto::StateType State::_internal_type() const {
  return static_cast< ::state_representation::proto::StateType >(type_);
}
inline ::state_representation::proto::StateType State::type() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.State.type)
  return _internal_type();
}
inline void State::_internal_set_type(::state_representation::proto::StateType value) {
  
  type_ = value;
}
inline void State::set_type(::state_representation::proto::StateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.State.type)
}

// bool empty = 3;
inline void State::clear_empty() {
  empty_ = false;
}
inline bool State::_internal_empty() const {
  return empty_;
}
inline bool State::empty() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.State.empty)
  return _internal_empty();
}
inline void State::_internal_set_empty(bool value) {
  
  empty_ = value;
}
inline void State::set_empty(bool value) {
  _internal_set_empty(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.State.empty)
}

// int64 timestamp = 4;
inline void State::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::timestamp() const {
  // @@protoc_insertion_point(field_get:state_representation.proto.State.timestamp)
  return _internal_timestamp();
}
inline void State::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void State::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:state_representation.proto.State.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace state_representation

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::state_representation::proto::StateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::state_representation::proto::StateType>() {
  return ::state_representation::proto::StateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_5frepresentation_2fstate_2eproto
