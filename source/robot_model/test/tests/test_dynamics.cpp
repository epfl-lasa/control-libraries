#include "robot_model/Model.hpp"

#include <memory>
#include <gtest/gtest.h>

using namespace robot_model;

class RobotModelDynamicsTest : public testing::Test {
protected:
  void SetUp() override {
    franka = std::make_unique<Model>("franka", std::string(TEST_FIXTURES) + "panda_arm.urdf");
    set_test_configurations();
  }

  std::unique_ptr<Model> franka;

  double tol = 1e-5;

  // Known test configurations generated by fixtures/generateRobotModelDynamicsTestConfigurations.m
  std::vector<state_representation::JointState> test_configs;
  std::vector<std::vector<double>> test_gravity_expects;
  std::vector<std::vector<double>> test_coriolis_expects;
  std::vector<std::vector<double>> test_inertia_expects;

  void set_test_configurations() {
    // Random test configuration 1:
    state_representation::JointState config1(franka->get_robot_name(), 7);
    config1.set_positions({-1.957518, 1.037530, -1.093933, -1.485144, -1.937432, 2.251972, -1.373487});
    config1.set_velocities({0.308158, 0.378429, 0.496303, -0.098917, -0.832357, -0.542046, 0.826675});
    config1.set_accelerations({-0.695244, 0.651634, 0.076685, 0.992269, -0.843649, -0.114643, -0.786694});
    test_configs.push_back(config1);

    // Expected results for configuration 1:
    test_gravity_expects.push_back({-0.000000, -36.985759, -18.785455, 11.384067, -0.532842, -1.346848, -0.071370});
    test_coriolis_expects.push_back({-0.049325, -0.064489, -0.060717, -0.295963, -0.009998, 0.026109, 0.003887});
    test_inertia_expects.push_back({-0.733398, 0.568876, -0.066627, -0.156614, -0.030068, -0.025849, -0.006774});

    // Random test configuration 2:
    state_representation::JointState config2(franka->get_robot_name(), 7);
    config2.set_positions({2.676515, -1.746462, 1.592996, -0.618256, 2.136438, 0.300823, -0.580719});
    config2.set_velocities({-0.480259, 0.600137, -0.137172, 0.821295, -0.636306, -0.472394, -0.708922});
    config2.set_accelerations({-0.727863, 0.738584, 0.159409, 0.099720, -0.710090, 0.706062, 0.244110});
    test_configs.push_back(config2);

    // Expected results for configuration 2:
    test_gravity_expects.push_back({0.000000, 46.737623, -11.062411, -0.418143, 1.394652, -0.410398, -0.080678});
    test_coriolis_expects.push_back({-0.681592, 0.045743, -0.095830, -0.334480, -0.048538, -0.035243, 0.004909});
    test_inertia_expects.push_back({-1.852231, 1.722144, -0.507043, -0.848135, 0.017090, 0.061230, -0.000671});

    // Random test configuration 3:
    state_representation::JointState config3(franka->get_robot_name(), 7);
    config3.set_positions({-0.863671, 0.046713, -0.568983, -2.843748, -1.507082, 0.447412, -1.831628});
    config3.set_velocities({-0.520095, -0.165466, -0.900691, 0.805432, 0.889574, -0.018272, -0.021495});
    config3.set_accelerations({-0.324561, 0.800108, -0.261506, -0.777594, 0.560504, -0.220522, -0.516617});
    test_configs.push_back(config3);

    // Expected results for configuration 3:
    test_gravity_expects.push_back({-0.000000, -13.069054, -0.438318, 8.176336, -0.407568, -1.650201, -0.039456});
    test_coriolis_expects.push_back({-0.740733, -0.448481, -0.753723, -0.730530, 0.025492, -0.069786, 0.003485});
    test_inertia_expects.push_back({-0.280448, 0.700827, -0.252397, -0.716163, 0.087168, 0.006495, -0.009142});
  }
};

TEST_F(RobotModelDynamicsTest, TestComputeInertiaMatrix) {
  state_representation::JointPositions jp = state_representation::JointPositions::Random("robot", 7);
  Eigen::MatrixXd inertia = franka->compute_inertia_matrix(jp);
  EXPECT_TRUE(inertia.rows() == jp.get_size() && inertia.cols() == jp.get_size());
  // expect the matrix to be symmetric
  Eigen::MatrixXd upper_part = inertia.triangularView<Eigen::StrictlyUpper>();
  Eigen::MatrixXd lower_part = inertia.triangularView<Eigen::StrictlyLower>();
  EXPECT_TRUE(upper_part.isApprox(lower_part.transpose()));
}

TEST_F(RobotModelDynamicsTest, TestComputeInertiaTorques) {
  state_representation::JointState js = state_representation::JointState::Random("robot", 7);
  state_representation::JointTorques inertia_torques = franka->compute_inertia_torques(js);
  EXPECT_TRUE(inertia_torques.data().norm() > 0);

  for (std::size_t config = 0; config < test_configs.size(); ++config) {
    inertia_torques = franka->compute_inertia_torques(test_configs[config]);
    for (std::size_t joint = 0; joint < 7; ++joint) {
      EXPECT_NEAR(inertia_torques.get_torques()[joint], test_inertia_expects[config][joint], tol);
    }
  }
}

TEST_F(RobotModelDynamicsTest, TestComputeCoriolisMatrix) {
  state_representation::JointState js = state_representation::JointState::Random("robot", 7);
  Eigen::MatrixXd coriolis = franka->compute_coriolis_matrix(js);
  EXPECT_TRUE(coriolis.rows() == js.get_size() && coriolis.cols() == js.get_size());
}

TEST_F(RobotModelDynamicsTest, TestComputeCoriolisTorques) {
  state_representation::JointState js = state_representation::JointState::Random("robot", 7);
  state_representation::JointTorques coriolis_torques = franka->compute_coriolis_torques(js);
  EXPECT_TRUE(coriolis_torques.data().norm() > 0);

  for (std::size_t config = 0; config < test_configs.size(); ++config) {
    coriolis_torques = franka->compute_coriolis_torques(test_configs[config]);
    for (std::size_t joint = 0; joint < 7; ++joint) {
      EXPECT_NEAR(coriolis_torques.get_torques()[joint], test_coriolis_expects[config][joint], tol);
    }
  }
}

TEST_F(RobotModelDynamicsTest, TestComputeGravityTorques) {
  state_representation::JointPositions jp = state_representation::JointPositions::Random("robot", 7);
  state_representation::JointTorques gravity_torques = franka->compute_gravity_torques(jp);
  EXPECT_TRUE(gravity_torques.data().norm() > 0);

  for (std::size_t config = 0; config < test_configs.size(); ++config) {
    gravity_torques = franka->compute_gravity_torques(test_configs[config]);
    for (std::size_t joint = 0; joint < 7; ++joint) {
      EXPECT_NEAR(gravity_torques.get_torques()[joint], test_gravity_expects[config][joint], tol);
    }
  }
}